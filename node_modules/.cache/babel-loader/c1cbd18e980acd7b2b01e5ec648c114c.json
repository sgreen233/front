{"remainingRequest":"D:\\software\\front\\front\\node_modules\\babel-loader\\lib\\index.js!D:\\software\\front\\front\\src\\utils\\rsaEncrypt.js","dependencies":[{"path":"D:\\software\\front\\front\\src\\utils\\rsaEncrypt.js","mtime":1715830118042},{"path":"D:\\software\\front\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1715830111371},{"path":"D:\\software\\front\\front\\node_modules\\babel-loader\\lib\\index.js","mtime":1715830110683}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICJEOi9zb2Z0d2FyZS9mcm9udC9mcm9udC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBjb25zdGFudCBmcm9tICdAL2NvbnN0YW50JzsKaW1wb3J0IG90aGVyQVBJIGZyb20gJ0AvYXBpL290aGVyJzsKCnZhciBDcnlwdG9KUyA9IHJlcXVpcmUoJ2NyeXB0by1qcycpOyAvLyBjb25zdCBkYXRhID0gJzg4ODg4OCcKLy8gY29uc3Qgc3JjcyA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKGRhdGEpCgoKdmFyIGtleSA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKGNvbnN0YW50LkNSWVBUKTsKCmZ1bmN0aW9uIEVuY3J5cHQoX3gpIHsKICByZXR1cm4gX0VuY3J5cHQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX0VuY3J5cHQoKSB7CiAgX0VuY3J5cHQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUod29yZCkgewogICAgdmFyIGtleTEsIGtleSwgc3JjcywgZW5jcnlwdGVkLCB2YWx1ZTsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgIHJldHVybiBvdGhlckFQSS5nZXRLZXkoKTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIGtleTEgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICBrZXkgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZShvdGhlckFQSS5nZXRXaG9sZUtleShrZXkxLmRhdGEua2V5LCBrZXkxLmRhdGEudmFsdWUpKTsgLy8gY29uc29sZS5sb2cob3RoZXJBUEkuZ2V0V2hvbGVLZXkoa2V5MS5kYXRhLmtleSwga2V5MS5kYXRhLnZhbHVlKSkKCiAgICAgICAgICAgIHNyY3MgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZSh3b3JkKTsKICAgICAgICAgICAgZW5jcnlwdGVkID0gQ3J5cHRvSlMuQUVTLmVuY3J5cHQoc3Jjcywga2V5LCB7CiAgICAgICAgICAgICAgbW9kZTogQ3J5cHRvSlMubW9kZS5FQ0IsCiAgICAgICAgICAgICAgcGFkZGluZzogQ3J5cHRvSlMucGFkLlBrY3M3CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB2YWx1ZSA9IGtleTEuZGF0YS52YWx1ZTsKICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSA+IDkgPyB2YWx1ZSA6ICcwJyArIHZhbHVlOwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBlbmNyeXB0ZWQudG9TdHJpbmcoKSArIHZhbHVlKTsKCiAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZSk7CiAgfSkpOwogIHJldHVybiBfRW5jcnlwdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBEZWNyeXB0KHdvcmQpIHsKICB2YXIgZGVjcnlwdCA9IENyeXB0b0pTLkFFUy5kZWNyeXB0KHdvcmQsIGtleSwgewogICAgbW9kZTogQ3J5cHRvSlMubW9kZS5FQ0IsCiAgICBwYWRkaW5nOiBDcnlwdG9KUy5wYWQuUGtjczcKICB9KTsKICByZXR1cm4gQ3J5cHRvSlMuZW5jLlV0Zjguc3RyaW5naWZ5KGRlY3J5cHQpLnRvU3RyaW5nKCk7Cn0KCmZ1bmN0aW9uIGdldEVuY3J5cHRLZXlXb3JkKF94MikgewogIHJldHVybiBfZ2V0RW5jcnlwdEtleVdvcmQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX2dldEVuY3J5cHRLZXlXb3JkKCkgewogIF9nZXRFbmNyeXB0S2V5V29yZCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoa2V5d29yZCkgewogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIEVuY3J5cHQoa2V5d29yZCkpOwoKICAgICAgICAgIGNhc2UgMToKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTIpOwogIH0pKTsKICByZXR1cm4gX2dldEVuY3J5cHRLZXlXb3JkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmV4cG9ydCB7IERlY3J5cHQsIEVuY3J5cHQsIGdldEVuY3J5cHRLZXlXb3JkIH07"},{"version":3,"sources":["D:/software/front/front/src/utils/rsaEncrypt.js"],"names":["constant","otherAPI","CryptoJS","require","key","enc","Utf8","parse","CRYPT","Encrypt","word","getKey","key1","getWholeKey","data","value","srcs","encrypted","AES","encrypt","mode","ECB","padding","pad","Pkcs7","toString","Decrypt","decrypt","stringify","getEncryptKeyWord","keyword"],"mappings":";;;;AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,aAArB;;AAEA,IAAMC,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB,C,CACA;AACA;;;AACA,IAAMC,GAAG,GAAGF,QAAQ,CAACG,GAAT,CAAaC,IAAb,CAAkBC,KAAlB,CAAwBP,QAAQ,CAACQ,KAAjC,CAAZ;;SAEeC,O;;;;;qEAAf,iBAAuBC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACqBT,QAAQ,CAACU,MAAT,EADrB;;AAAA;AACQC,YAAAA,IADR;AAEQR,YAAAA,GAFR,GAEcF,QAAQ,CAACG,GAAT,CAAaC,IAAb,CAAkBC,KAAlB,CAAwBN,QAAQ,CAACY,WAAT,CAAqBD,IAAI,CAACE,IAAL,CAAUV,GAA/B,EAAoCQ,IAAI,CAACE,IAAL,CAAUC,KAA9C,CAAxB,CAFd,EAGE;;AACIC,YAAAA,IAJN,GAIad,QAAQ,CAACG,GAAT,CAAaC,IAAb,CAAkBC,KAAlB,CAAwBG,IAAxB,CAJb;AAKMO,YAAAA,SALN,GAKkBf,QAAQ,CAACgB,GAAT,CAAaC,OAAb,CAAqBH,IAArB,EAA2BZ,GAA3B,EAAgC;AAAEgB,cAAAA,IAAI,EAAElB,QAAQ,CAACkB,IAAT,CAAcC,GAAtB;AAA2BC,cAAAA,OAAO,EAAEpB,QAAQ,CAACqB,GAAT,CAAaC;AAAjD,aAAhC,CALlB;AAOMT,YAAAA,KAPN,GAOcH,IAAI,CAACE,IAAL,CAAUC,KAPxB;AAQEA,YAAAA,KAAK,GAAGA,KAAK,GAAG,CAAR,GAAYA,KAAZ,GAAoB,MAAMA,KAAlC;AARF,6CASSE,SAAS,CAACQ,QAAV,KAAuBV,KAThC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAWA,SAASW,OAAT,CAAiBhB,IAAjB,EAAuB;AACrB,MAAIiB,OAAO,GAAGzB,QAAQ,CAACgB,GAAT,CAAaS,OAAb,CAAqBjB,IAArB,EAA2BN,GAA3B,EAAgC;AAAEgB,IAAAA,IAAI,EAAElB,QAAQ,CAACkB,IAAT,CAAcC,GAAtB;AAA2BC,IAAAA,OAAO,EAAEpB,QAAQ,CAACqB,GAAT,CAAaC;AAAjD,GAAhC,CAAd;AACA,SAAOtB,QAAQ,CAACG,GAAT,CAAaC,IAAb,CAAkBsB,SAAlB,CAA4BD,OAA5B,EAAqCF,QAArC,EAAP;AACD;;SAEcI,iB;;;;;+EAAf,kBAAiCC,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,8CAQSrB,OAAO,CAACqB,OAAD,CARhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAkBA,SACEJ,OADF,EAEEjB,OAFF,EAGEoB,iBAHF","sourcesContent":["import constant from '@/constant'\r\nimport otherAPI from '@/api/other'\r\n\r\nconst CryptoJS = require('crypto-js')\r\n// const data = '888888'\r\n// const srcs = CryptoJS.enc.Utf8.parse(data)\r\nconst key = CryptoJS.enc.Utf8.parse(constant.CRYPT)\r\n\r\nasync function Encrypt(word) {\r\n  const key1 = await otherAPI.getKey()\r\n  const key = CryptoJS.enc.Utf8.parse(otherAPI.getWholeKey(key1.data.key, key1.data.value))\r\n  // console.log(otherAPI.getWholeKey(key1.data.key, key1.data.value))\r\n  var srcs = CryptoJS.enc.Utf8.parse(word)\r\n  var encrypted = CryptoJS.AES.encrypt(srcs, key, { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7 })\r\n\r\n  var value = key1.data.value\r\n  value = value > 9 ? value : '0' + value\r\n  return encrypted.toString() + value\r\n}\r\nfunction Decrypt(word) {\r\n  var decrypt = CryptoJS.AES.decrypt(word, key, { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7 })\r\n  return CryptoJS.enc.Utf8.stringify(decrypt).toString()\r\n}\r\n\r\nasync function getEncryptKeyWord(keyword) {\r\n  // var date = new Date()\r\n  // var minute = date.getMinutes()\r\n  // var second = date.getSeconds()\r\n  // minute = minute > 9 ? minute : '0' + minute\r\n  // second = second > 9 ? second : '0' + second\r\n  // return Encrypt( Math.floor(Math.random() * 10) + keyword + Math.floor(Math.random() * 10))\r\n  // return Encrypt( minute + keyword + second)\r\n  return Encrypt(keyword)\r\n  // console.log(key)\r\n  // console.log(otherAPI.getKey())\r\n  // var key1 = await otherAPI.getKey()\r\n  // const key = CryptoJS.enc.Utf8.parse(key1.data)\r\n  // var srcs = CryptoJS.enc.Utf8.parse(keyword)\r\n  // var encrypted = CryptoJS.AES.encrypt(srcs, key, {mode:CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7})\r\n  // return encrypted.toString()\r\n}\r\n\r\nexport {\r\n  Decrypt,\r\n  Encrypt,\r\n  getEncryptKeyWord\r\n}\r\n"]}]}