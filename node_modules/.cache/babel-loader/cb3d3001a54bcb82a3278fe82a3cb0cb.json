{"remainingRequest":"D:\\software\\front\\front\\node_modules\\babel-loader\\lib\\index.js!D:\\software\\front\\front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\software\\front\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\software\\front\\front\\src\\components\\SimpleUpload.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\software\\front\\front\\src\\components\\SimpleUpload.vue","mtime":1715830118032},{"path":"D:\\software\\front\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1715830111371},{"path":"D:\\software\\front\\front\\node_modules\\babel-loader\\lib\\index.js","mtime":1715830110683},{"path":"D:\\software\\front\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1715830111371},{"path":"D:\\software\\front\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":1715830117510}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["SimpleUpload.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div>\r\n    <el-upload ref=\"upload\" v-model=\"fileList\" action multiple  :list-type=\"listType\" :auto-upload=\"autoUpload\" :before-remove=\"handleBeforeRemove\" :on-preview=\"handlePreview\" :on-remove=\"handleRemove\" :on-change=\"handleChange\" :file-list=\"fileList\" :http-request=\"() => {}\" :before-upload=\"beforeUploadVerify\">\r\n      <el-button size=\"small\" type=\"primary\" :title=\"upButtonInfo.tooltip\" @click.stop=\"beforeUpload\">{{ upButtonInfo.name }}</el-button>\r\n    </el-upload>\r\n    <div v-show=\"upLoading\">\r\n      <el-progress ref=\"progressBar\" :percentage=\"progressPercent\" :text-inside=\"true\" :stroke-width=\"24\" status=\"success\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\n// 注：一般不能自动上传服务器，否则无法知道关联表信息，所以必须是在外层调用上传\r\n\r\nimport CONSTANT from '@/constant'\r\nimport fileAPI from '@/api/file'\r\n\r\nexport default {\r\n  name: 'SimpleUplaod',\r\n  props: {\r\n    value: { type: Array, default: () => [] }, // 父组件 v-model 绑定值\r\n    upButtonInfo: {\r\n      type: Object, default: () => ({\r\n        name: '点击上传',\r\n        tooltip: '只能上传jpg/png文件，且不超过500kb！'\r\n      })\r\n    },\r\n    fileMaxSize: { type: Number, default: CONSTANT.FILE_MAX_SIZE },\r\n    fileAllowedTypes: { type: Array, default: () => [] }, // 支持文件类型\r\n    autoUpload: { type: Boolean, default: true },\r\n    multiple: { type: Boolean, default: true },\r\n    allowMultiFiles: { type: Boolean, default: true },\r\n    updateStatus: { type: Boolean, default: true },\r\n    listType: { type: String, default: 'text' },\r\n  },\r\n  data() {\r\n    return {\r\n      fileList: this.value,\r\n      upLoading: false,\r\n      progressPercent: 0,\r\n      timer: null,\r\n      isManualDelete: true\r\n    }\r\n  },\r\n  watch: {\r\n    value: {\r\n      handler(val) {\r\n        if (val) {\r\n          this.fileList = val          \r\n        }\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.thisEvents = JSON.parse(JSON.stringify(this._events))\r\n  },\r\n  methods: {\r\n    clearFiles() {\r\n      this.$refs['upload'].clearFiles()\r\n    },\r\n    // 上传之前的回调\r\n    beforeUpload() {\r\n      if (!this.updateStatus) {\r\n        this.$message.warning('当前状态无法上传文件！')\r\n      } else if (this.fileList && (this.fileList.length > 0) && (!this.allowMultiFiles)) {\r\n        this.$message.warning('上传文件已经选择！如需重新选择，请先删除已选择文件！')\r\n      } else {\r\n        this.$refs['upload'].$refs['upload-inner'].handleClick()\r\n      }\r\n    },\r\n    beforeUploadVerify(file) {\r\n      // 首先判断文件大小\r\n      this.isManualDelete = false\r\n      const isLtSize = file.size / 1024 / 1024 < this.fileMaxSize\r\n      if (!isLtSize) {\r\n        this.$message.warning(`上传文件大小不能超过${this.fileMaxSize}MB!`)\r\n        return false\r\n      }\r\n      // 然后判断文件格式是否正确\r\n      const fileName = file.name.lastIndexOf('.')\r\n      const fileNameLength = file.name.length\r\n      const fileFormat = file.name.substring(fileName + 1, fileNameLength)\r\n      if ((this.fileAllowedTypes.length > 0) && (this.fileAllowedTypes.indexOf(fileFormat.toLowerCase()) === -1)) {\r\n        this.$message.warning(this.upButtonInfo.tooltip)\r\n        return false\r\n      }\r\n      // 最后判断是否是重复文件选择\r\n      let i = 0\r\n      this.fileList.forEach(fi => {\r\n        if ((fi.name === file.name) && (fi.size === file.size)) {\r\n          i++\r\n        }\r\n      })\r\n      if (i > 1) {\r\n        this.$message.warning('当前文件已经选择！')\r\n        return false\r\n      }\r\n      this.isManualDelete = true\r\n      return file\r\n    },\r\n    handleChange(file, fileList) {\r\n      this.fileList = fileList\r\n      this.$emit('handle-change', fileList)\r\n    },\r\n    handleBeforeRemove(file, fileList) {\r\n      if (!this.updateStatus) {\r\n        this.$message.warning('当前文件不能被删除！')\r\n        return false\r\n      }\r\n      if (this.isManualDelete) {\r\n        return this.$confirm('删除以后不可恢复，确定删除该文件吗？', '警告', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消'\r\n        })\r\n      }\r\n    },\r\n    async handleRemove(file, fileList) {\r\n      if (file.status === 'success') {\r\n        await fileAPI.deleteFile([file.id])\r\n      }\r\n      this.fileList = fileList\r\n    },\r\n    // type: 1 图片；2 文件\r\n    async handleUpload(userId, relId, type) {\r\n      const files = []\r\n      this.fileList.forEach(fi => {\r\n        files.push(fi.raw)\r\n      })\r\n      const params = {\r\n        files: files,\r\n        userId: userId,\r\n        relId: relId,\r\n        type: type\r\n      }\r\n      try {\r\n        this.upLoading = true\r\n        this.timer = setInterval(this.handleProgress, 1000)        \r\n        await fileAPI.upload(params, this.progressPercent)\r\n      } catch (error) {\r\n        this.$message.warning('文件上传失败' + error)\r\n      }\r\n      this.upLoading = false\r\n    },\r\n    handleProgress() {\r\n      this.progressPercent = fileAPI.getProgressPercent()\r\n      if (!this.upLoading) {\r\n        clearInterval(this.timer)\r\n        this.timer = null\r\n      }\r\n    },\r\n    handlePreview(file) {\r\n      if (file.status === 'success') {\r\n        this.$confirm('是否下载该文件？', '提示')\r\n          .then(async _ => {\r\n            this.fullScreenLoading()            \r\n            const content = await fileAPI.downloadFile(file.id)            \r\n            this.downloadFile(content, file.name)\r\n            this.fullScreenLoading().close()\r\n          })\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"sourceRoot":"src/components"}]}