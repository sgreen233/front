{"remainingRequest":"D:\\software\\front\\node_modules\\babel-loader\\lib\\index.js!D:\\software\\front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\software\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\software\\front\\src\\components\\DataTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\software\\front\\src\\components\\DataTree.vue","mtime":1670666519420},{"path":"D:\\software\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\front\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\software\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICJEOi9zb2Z0d2FyZS9mcm9udC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCB0cmVlQVBJIGZyb20gJ0AvYXBpL3RyZWUnOwppbXBvcnQgYWRhcHRpdmVDYXJkIGZyb20gJ0AvZGlyZWN0aXZlL2VsLWNhcmQnOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0RhdGFUcmVlJywKICBkaXJlY3RpdmVzOiB7CiAgICBhZGFwdGl2ZUNhcmQ6IGFkYXB0aXZlQ2FyZAogIH0sCiAgcHJvcHM6IHsKICAgIGRlZmF1bHRQcm9wczogewogICAgICAvLyDms6jmhI/ov5nph4znmoTpu5jorqTlgLzmsqHmnInnlKgKICAgICAgdHlwZTogT2JqZWN0LAogICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgdGl0bGU6IHsKICAgICAgICAgICAgbWFpblRpdGxlOiAnJywKICAgICAgICAgICAgc3ViVGl0bGU6ICcnCiAgICAgICAgICB9LAogICAgICAgICAgY2hlY2tGbGFnOiB7CiAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICAgICAgICB9LAogICAgICAgICAgbGF6eTogewogICAgICAgICAgICB0eXBlOiBCb29sZWFuLAogICAgICAgICAgICBkZWZhdWx0OiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHZpcnR1YWxSb290RmxhZzogewogICAgICAgICAgICB0eXBlOiBCb29sZWFuLAogICAgICAgICAgICBkZWZhdWx0OiB0cnVlCiAgICAgICAgICB9LAogICAgICAgICAga2V5V29yZDogewogICAgICAgICAgICB0eXBlOiBTdHJpbmcsCiAgICAgICAgICAgIGRlZmF1bHQ6ICcnCiAgICAgICAgICB9LAogICAgICAgICAgaW5pdFNlYXJjaFdvcmRzOiB7CiAgICAgICAgICAgIC8vIOWIneWni+aXtuafpeivoueahOS4ieS4quWFs+mUruivjQogICAgICAgICAgICBzZWFyY2hLZXk6IHt9LAogICAgICAgICAgICByZWdLZXk6IHt9LAogICAgICAgICAgICBhbmRvcjoge30KICAgICAgICAgIH0KICAgICAgICB9OwogICAgICB9CiAgICB9CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgdHJlZURhdGE6IFtdLAogICAgICBkZWZhdWx0RGF0YVByb3BzOiB7CiAgICAgICAgbGFiZWw6ICduYW1lJywKICAgICAgICBjaGlsZHJlbjogJ2NoaWxkcmVuJywKICAgICAgICBpc0xlYWY6ICdpc0xlYWYnCiAgICAgIH0sCiAgICAgIGxvYWRpbmc6IGZhbHNlLAogICAgICBtYXBzOiBuZXcgTWFwKCkKICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgLy8gdmFyaWFibGVzKCkgewogICAgLy8gICByZXR1cm4gdmFyaWFibGVzCiAgICAvLyB9LAogICAga2V5V29yZDogZnVuY3Rpb24ga2V5V29yZCgpIHsKICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdFByb3BzLmtleVdvcmQgPyB0aGlzLmRlZmF1bHRQcm9wcy5rZXlXb3JkIDogbnVsbDsKICAgIH0sCiAgICB0aXRsZTogZnVuY3Rpb24gdGl0bGUoKSB7CiAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRQcm9wcy50aXRsZSA/IHRoaXMuZGVmYXVsdFByb3BzLnRpdGxlIDogbnVsbDsKICAgIH0sCiAgICBsYXp5OiBmdW5jdGlvbiBsYXp5KCkgewogICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuZGVmYXVsdFByb3BzLCAnbGF6eScpKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdFByb3BzLmxhenk7CiAgICAgIH0KCiAgICAgIHJldHVybiB0cnVlOwogICAgfSwKICAgIGNoZWNrRmxhZzogZnVuY3Rpb24gY2hlY2tGbGFnKCkgewogICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuZGVmYXVsdFByb3BzLCAnY2hlY2tGbGFnJykpIHsKICAgICAgICByZXR1cm4gdGhpcy5kZWZhdWx0UHJvcHMuY2hlY2tGbGFnOwogICAgICB9CgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9LAogICAgc29ydDogZnVuY3Rpb24gc29ydCgpIHsKICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdFByb3BzLnNvcnQgPyB0aGlzLmRlZmF1bHRQcm9wcy5zb3J0IDogewogICAgICAgIHByb3BlcnRpZXM6ICd0aGVPcmRlcicsCiAgICAgICAgZGlyZWN0aW9uOiAnQVNDJwogICAgICB9OwogICAgfSwKICAgIHZpcnR1YWxSb290RmxhZzogZnVuY3Rpb24gdmlydHVhbFJvb3RGbGFnKCkgewogICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuZGVmYXVsdFByb3BzLCAndmlydHVhbFJvb3RGbGFnJykpIHsKICAgICAgICByZXR1cm4gdGhpcy5kZWZhdWx0UHJvcHMudmlydHVhbFJvb3RGbGFnOwogICAgICB9CgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9LAogICAgaW5pdFNlYXJjaFdvcmRzOiBmdW5jdGlvbiBpbml0U2VhcmNoV29yZHMoKSB7CiAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRQcm9wcy5pbml0U2VhcmNoV29yZHMgPyB0aGlzLmRlZmF1bHRQcm9wcy5pbml0U2VhcmNoV29yZHMgOiB7fTsKICAgIH0KICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB0aGlzLmluaXREYXRhVHJlZSgpOwogIH0sCiAgbWV0aG9kczogewogICAgLy8g5Yid5aeL5oeS5Yqg6L29CiAgICBsYXp5TG9hZDogZnVuY3Rpb24gbGF6eUxvYWQodHJlZSwgcmVzb2x2ZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKHRyZWUua2V5KSB7CiAgICAgICAgdHJlZUFQSS5nZXRBbGxOb2Rlcyh7CiAgICAgICAgICBrZXlXb3JkczogdGhpcy5rZXlXb3JkLAogICAgICAgICAgdmlydHVhbFJvb3RGbGFnOiB0aGlzLnZpcnR1YWxSb290RmxhZywKICAgICAgICAgIHNlYXJjaEtleTogdGhpcy5zZWFyY2hLZXksCiAgICAgICAgICBsYXp5OiB0cnVlLAogICAgICAgICAgcGFyZW50SWQ6IHRyZWUua2V5LAogICAgICAgICAgc29ydDogdGhpcy5zb3J0CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICBfdGhpcy5tYXBzLnNldCh0cmVlLmtleSwgewogICAgICAgICAgICB0cmVlOiB0cmVlLAogICAgICAgICAgICByZXNvbHZlOiByZXNvbHZlCiAgICAgICAgICB9KTsKCiAgICAgICAgICByZXNvbHZlKHJlcy5kYXRhKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIC8vIOWIneWni+WMli/liLfmlrDmoJEKICAgIGluaXREYXRhVHJlZTogZnVuY3Rpb24gaW5pdERhdGFUcmVlKHBhcmVudElkKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgcmVzOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF90aGlzMi5sb2FkaW5nID0gdHJ1ZTsKCiAgICAgICAgICAgICAgICBpZiAoIXBhcmVudElkKSB7CiAgICAgICAgICAgICAgICAgIHBhcmVudElkID0gLTE7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiB0cmVlQVBJLmdldEFsbE5vZGVzKHsKICAgICAgICAgICAgICAgICAga2V5V29yZHM6IF90aGlzMi5rZXlXb3JkLAogICAgICAgICAgICAgICAgICB2aXJ0dWFsUm9vdEZsYWc6IF90aGlzMi52aXJ0dWFsUm9vdEZsYWcsCiAgICAgICAgICAgICAgICAgIHNlYXJjaEtleTogX3RoaXMyLnNlYXJjaEtleSwKICAgICAgICAgICAgICAgICAgbGF6eTogX3RoaXMyLmxhenksCiAgICAgICAgICAgICAgICAgIHBhcmVudElkOiBwYXJlbnRJZCwKICAgICAgICAgICAgICAgICAgc29ydDogX3RoaXMyLnNvcnQKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICByZXMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgX3RoaXMyLnRyZWVEYXRhID0gcmVzLmRhdGE7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDk7CiAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDIpOwogICAgICAgICAgICAgICAgX3RoaXMyLmxvYWRpbmcgPSBmYWxzZTsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIF90aGlzMi5sb2FkaW5nID0gZmFsc2U7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzIsIDldXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIOeCueWHu+iKgueCueS6i+S7tgogICAgaGFuZGxlTm9kZUNsaWNrOiBmdW5jdGlvbiBoYW5kbGVOb2RlQ2xpY2socm93KSB7CiAgICAgIHRoaXMuJGVtaXQoJ25vZGUtY2xpY2snLCByb3cpOwogICAgfQogIH0KfTs="},{"version":3,"sources":["DataTree.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <el-card v-adaptive-card :class=\"title ? '' : 'card-notitle'\" shadow=\"never\">\r\n    <template v-if=\"title\" slot=\"header\">\r\n      <span>{{ title.mainTitle }}</span>\r\n      <span v-if=\"title.subTitle\">&nbsp;|&nbsp;<strong>{{ title.subTitle || \"全部\" }}</strong></span>\r\n    </template>\r\n    <!--  <div v-if=\"title\" id=\"table-box-title\" slot=\"header\">\r\n      <span>{{ title }}</span>\r\n      <span v-show=\"subtitle\">\r\n        &nbsp;|&nbsp;\r\n        <strong>{{ subtitle }}</strong>\r\n      </span>\r\n    </div> -->\r\n    <el-tree ref=\"dataTree\" v-adaptive-card v-loading=\"loading\" :lazy=\"lazy\" :load=\"lazyLoad\" highlight-current node-key=\"id\" :show-checkbox=\"checkFlag\" :expand-on-node=\"false\" :default-expanded-keys=\"[-1]\" :data=\"treeData\" :props=\"defaultDataProps\" @node-click=\"handleNodeClick\" />\r\n  </el-card>\r\n</template>\r\n\r\n<script>\r\nimport treeAPI from '@/api/tree'\r\nimport adaptiveCard from '@/directive/el-card'\r\n\r\nexport default {\r\n  name: 'DataTree',\r\n  directives: { adaptiveCard },\r\n  props: {\r\n    defaultProps: { // 注意这里的默认值没有用\r\n      type: Object,\r\n      default: () => {\r\n        return {\r\n          title: { mainTitle: '', subTitle: '' },\r\n          checkFlag: { type: Boolean, default: false },\r\n          lazy: { type: Boolean, default: false },\r\n          virtualRootFlag: { type: Boolean, default: true },\r\n          keyWord: { type: String, default: '' },\r\n          initSearchWords: { // 初始时查询的三个关键词\r\n            searchKey: { },\r\n            regKey: { },\r\n            andor: { }\r\n          }\r\n\r\n        }\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      treeData: [],\r\n      defaultDataProps: {\r\n        label: 'name',\r\n        children: 'children',\r\n        isLeaf: 'isLeaf'\r\n      },\r\n      loading: false,\r\n      maps: new Map()\r\n    }\r\n  },\r\n  computed: {\r\n    // variables() {\r\n    //   return variables\r\n    // },\r\n    keyWord() {\r\n      return this.defaultProps.keyWord ? this.defaultProps.keyWord : null\r\n    },\r\n    title() {\r\n      return this.defaultProps.title ? this.defaultProps.title : null\r\n    },\r\n    lazy() {\r\n      if (Object.prototype.hasOwnProperty.call(this.defaultProps, 'lazy')) {\r\n        return this.defaultProps.lazy\r\n      }\r\n      return true\r\n    },\r\n    checkFlag() {\r\n      if (Object.prototype.hasOwnProperty.call(this.defaultProps, 'checkFlag')) {\r\n        return this.defaultProps.checkFlag\r\n      }\r\n      return false\r\n    },\r\n    sort() {\r\n      return this.defaultProps.sort ? this.defaultProps.sort : { properties: 'theOrder', direction: 'ASC' }\r\n    },\r\n    virtualRootFlag() {\r\n      if (Object.prototype.hasOwnProperty.call(this.defaultProps, 'virtualRootFlag')) {\r\n        return this.defaultProps.virtualRootFlag\r\n      }\r\n      return false\r\n    },\r\n    initSearchWords() {\r\n      return this.defaultProps.initSearchWords ? this.defaultProps.initSearchWords : { }\r\n    }\r\n  },\r\n  created() {\r\n    this.initDataTree()\r\n  },\r\n  methods: {\r\n    // 初始懒加载\r\n    lazyLoad(tree, resolve) {\r\n      if (tree.key) {\r\n        treeAPI.getAllNodes({\r\n          keyWords: this.keyWord,\r\n          virtualRootFlag: this.virtualRootFlag,\r\n          searchKey: this.searchKey,\r\n          lazy: true,\r\n          parentId: tree.key,\r\n          sort: this.sort\r\n        }).then(res => {\r\n          this.maps.set(tree.key, { tree, resolve })\r\n          resolve(res.data)\r\n        })\r\n      }\r\n    },\r\n    // 初始化/刷新树\r\n    async initDataTree(parentId) {\r\n      this.loading = true\r\n      if (!parentId) {\r\n        parentId = -1\r\n      }\r\n      try {\r\n        const res = await treeAPI.getAllNodes({\r\n          keyWords: this.keyWord,\r\n          virtualRootFlag: this.virtualRootFlag,\r\n          searchKey: this.searchKey,\r\n          lazy: this.lazy,\r\n          parentId: parentId,\r\n          sort: this.sort\r\n        })\r\n        this.treeData = res.data\r\n      } catch (error) { this.loading = false }\r\n      this.loading = false\r\n    },\r\n    // 点击节点事件\r\n    handleNodeClick(row) {\r\n      this.$emit('node-click', row)\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n::v-deep .el-card__body {\r\n  padding: 5px 12px;\r\n}\r\n.card-notitle {\r\n  border: unset;\r\n  transition: unset;\r\n}\r\n.el-scrollbar .el-scrollbar__wrap {\r\n  overflow-x: hidden;\r\n}\r\n.el-tree {\r\n  overflow: auto;\r\n}\r\n#table-box-title {\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components"}]}