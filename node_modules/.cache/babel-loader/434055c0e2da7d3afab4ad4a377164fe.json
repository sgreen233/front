{"remainingRequest":"D:\\software\\front\\node_modules\\babel-loader\\lib\\index.js!D:\\software\\front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\software\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\software\\front\\src\\components\\DataTableTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\software\\front\\src\\components\\DataTableTree.vue","mtime":1670666519409},{"path":"D:\\software\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\front\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\software\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["DataTableTree.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <DataTableHeader ref=\"dataTBLMother\" :default-props=\"defaultProps.defaultDTHProps\" :selected-columns.sync=\"selectedColumns\" @init-click=\"initDataTree\" @append-click=\"appendClick\" @edit-click=\"editClick\" @delete-click=\"deleteClick\" @upload-finish=\"uploadFinish\">\r\n    <template slot=\"body\">\r\n      <el-card shadow=\"never\">\r\n        <slot slot=\"header\" name=\"cardTitle\" />\r\n        <template v-if=\"title\" slot=\"header\">\r\n          <span>{{ title.mainTitle }}</span>\r\n          <span v-if=\"title.subTitle\">&nbsp;|&nbsp;<strong>{{ title.subTitle || \"全部\" }}</strong></span>\r\n        </template>\r\n        <el-table ref=\"dataTree\" v-adaptive :lazy=\"lazy\" :load=\"lazyLoad\" height=\"100%\" border :data=\"treeTableData\" :tree-props=\"{children: 'children', hasChildren: 'hasChildren'}\" row-key=\"id\" highlight-current-row :default-expand-all=\"expandFlag\" :expand-row-keys=\"['-1']\" @current-change=\"handleNodeClick\" @select=\"handleSelection\" @selection-change=\"handleSelectionChange\" @select-all=\"handleSelectionAll\">\r\n          <el-table-column v-if=\"checkFlag\" type=\"selection\" fixed width=\"55px\" />\r\n          <el-table-column v-for=\"(item, index) in tableColumnItem\" :key=\"index\" :show-overflow-tooltip=\"true\" :label=\"item.showName\" :width=\"item.width\" align=\"left\">\r\n            <template #default=\"scope\">\r\n              <span v-if=\"item.tableColumnName === 'icon'\">\r\n                <svg-icon :icon-class=\"scope.row[item.tableColumnName]\" />\r\n              </span>\r\n              <!-- 判断是否是日期格式 -->\r\n              <span v-else-if=\"item.tableColumnName.endsWith('Time')\">{{ scope.row[item.tableColumnName] | filterDateTime }}</span>\r\n              <!-- 列表自定义显示的内容 >-->\r\n              <slot v-else-if=\"item.tableColumnName.startsWith('customize-')\" :name=\"item.tableColumnName.replace('customize-','')\" :row=\"scope.row\" />\r\n              <span v-else>{{ scope.row[item.tableColumnName] || '--' }}</span>\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column v-if=\"operateFlag\" fixed=\"right\" label=\"操作\" :width=\"operateWidth\">\r\n            <template #default=\"scope\">\r\n              <el-button type=\"primary\" icon=\"el-icon-plus\" size=\"mini\" title=\"新增下级\" @click=\"appendClick(scope.row)\" />\r\n              <el-button v-if=\"button.update.show\" type=\"info\" icon=\"el-icon-edit\" size=\"mini\" :title=\"button.update.name\" @click=\"editClick(scope.row)\" />\r\n              <el-button v-if=\"button.delete.show\" type=\"danger\" icon=\"el-icon-delete\" size=\"mini\" :title=\"button.delete.name\" @click=\"remove([scope.row])\" />\r\n              <el-button v-if=\"button.up.show\" type=\"warning\" icon=\" el-icon-top\" size=\"mini\" :title=\"button.up.name\" @click=\"changeNodes('up',scope.row)\" />\r\n              <el-button v-if=\"button.down.show\" type=\"warning\" icon=\" el-icon-bottom\" size=\"mini\" :title=\"button.down.name\" @click=\"changeNodes('down',scope.row)\" />\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n      </el-card>\r\n    </template>\r\n  </DataTableHeader>\r\n</template>\r\n<script>\r\n\r\nimport DataTableHeader from '@/components/DataTableHeader'\r\nimport treeAPI from '@/api/tree'\r\nimport adaptive from '@/directive/el-table'\r\nimport moment from 'moment'\r\n\r\n// 懒加载，新增第一个节点不展开，不出现小箭头，暂时未解决\r\n// 遗留思路，新增第一个节点，让上级节点出现小箭头\r\nexport default {\r\n  name: 'DataTableTree',\r\n  components: { DataTableHeader },\r\n  directives: { adaptive },\r\n  filters: {\r\n    filterDateTime(val) {\r\n      return moment(val).format('YYYY-MM-DD HH:mm')\r\n    }\r\n  },\r\n  props: {\r\n    defaultProps: { // 注意这里的默认值没有用\r\n      type: Object,\r\n      default: () => {\r\n        return {\r\n          keyWord: { },\r\n          title: { },\r\n          allTableColumns: { },\r\n          bottomOffset: 0,\r\n          someFlags: {\r\n            expandFlag: false,\r\n            checkFlag: false,\r\n            lazy: true,\r\n            operateFlag: true,\r\n            virtualRootFlag: false\r\n          },\r\n          initSearchWords: { // 初始时查询的三个关键词\r\n            searchKey: { },\r\n            regKey: { },\r\n            andor: { }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      operateWidth: 230,\r\n      treeTableData: [],\r\n      selectedColumns: [],\r\n      // 列表显示的属性项\r\n      tableColumnItem: [],\r\n\r\n      checkAll: true,\r\n      indeterminate: false,\r\n      addDisabled: false,\r\n      loading: true,\r\n      isAllSelect: false,\r\n\r\n      maps: new Map(),\r\n      thisEvents: ''\r\n    }\r\n  },\r\n  computed: {\r\n    // variables() {\r\n    //   return variables\r\n    // },\r\n    button() {\r\n      return this.$refs.dataTBLMother.button\r\n    },\r\n    keyWord() {\r\n      return this.$refs.dataTBLMother.keyWord\r\n    },\r\n    title() {\r\n      return this.defaultProps.title ? this.defaultProps.title : null\r\n    },\r\n    expandFlag() {\r\n      if (Object.prototype.hasOwnProperty.call(this.defaultProps, 'someFlags')) {\r\n        if (Object.prototype.hasOwnProperty.call(this.defaultProps.someFlags, 'expandFlag')) {\r\n          return this.defaultProps.someFlags.expandFlag\r\n        }\r\n      }\r\n      return false\r\n    },\r\n    checkFlag() {\r\n      if (Object.prototype.hasOwnProperty.call(this.defaultProps, 'someFlags')) {\r\n        if (Object.prototype.hasOwnProperty.call(this.defaultProps.someFlags, 'checkFlag')) {\r\n          return this.defaultProps.someFlags.checkFlag\r\n        }\r\n      }\r\n      return true\r\n    },\r\n    lazy() {\r\n      if (Object.prototype.hasOwnProperty.call(this.defaultProps, 'someFlags')) {\r\n        if (Object.prototype.hasOwnProperty.call(this.defaultProps.someFlags, 'lazy')) {\r\n          return this.defaultProps.someFlags.lazy\r\n        }\r\n      }\r\n      return true\r\n    },\r\n    operateFlag() {\r\n      if (Object.prototype.hasOwnProperty.call(this.defaultProps, 'someFlags')) {\r\n        if (Object.prototype.hasOwnProperty.call(this.defaultProps.someFlags, 'operateFlag')) {\r\n          return this.defaultProps.someFlags.operateFlag\r\n        }\r\n      }\r\n      return true\r\n    },\r\n    virtualRootFlag() {\r\n      if (Object.prototype.hasOwnProperty.call(this.defaultProps, 'someFlags')) {\r\n        if (Object.prototype.hasOwnProperty.call(this.defaultProps.someFlags, 'virtualRootFlag')) {\r\n          return this.defaultProps.someFlags.virtualRootFlag\r\n        }\r\n      }\r\n      return false\r\n    },\r\n    initSearchWords() {\r\n      return this.defaultProps.initSearchWords ? this.defaultProps.initSearchWords : { }\r\n    },\r\n    sort() {\r\n      return this.defaultProps.sort ? this.defaultProps.sort : { properties: 'theOrder', direction: 'ASC' }\r\n    },\r\n    bottomOffset() {\r\n      return this.defaultProps.bottomOffset ? this.defaultProps.bottomOffset : 0\r\n    }\r\n  },\r\n  mounted() {\r\n    this.thisEvents = JSON.parse(JSON.stringify(this._events))\r\n    let num = 1\r\n    const arr = [\r\n      this.button.delete.show,\r\n      this.button.update.show,\r\n      this.button.up.show,\r\n      this.button.down.show\r\n    ]\r\n    num = arr.reduce((acc, cur) => {\r\n      acc = cur ? acc + 1 : acc\r\n      return acc\r\n    }, 1)\r\n    var width = num * 46\r\n    if (width < 60) {\r\n      width = 60\r\n    }\r\n    this.operateWidth = width\r\n\r\n    setTimeout(() => { this.initDataTree() }, 500)\r\n  },\r\n  methods: {\r\n    // #region 初始化以及加载\r\n    // 懒加载\r\n    async lazyLoad(tree, treeNode, resolve) {\r\n      if (tree.id === -1) {\r\n        this.initDataTree()\r\n      } else {\r\n        var view = this.keyWord.view\r\n        const res = await treeAPI.getAllNodes({\r\n          keyWords: view,\r\n          parentId: tree.id,\r\n          virtualRootFlag: this.virtualRootFlag,\r\n          searchKey: this.searchKey,\r\n          lazy: true,\r\n          preName: tree.allNodeNames,\r\n          sort: this.sort\r\n        })\r\n        this.maps.set(tree.id, { tree, treeNode, resolve })\r\n        resolve(res.data)\r\n      }\r\n    },\r\n    // 加载部分树\r\n    updatePartTree(row) {\r\n      if (this.lazy) {\r\n        var nowMaps\r\n        if (this.maps.size > 0) {\r\n          nowMaps = this.maps.get(row.parentId)\r\n        }\r\n        if (nowMaps === undefined) {\r\n          this.lazyLoad({ id: -1, allNodeNames: '' }, null, null)\r\n        } else {\r\n          this.lazyLoad(nowMaps.tree, nowMaps.treeNode, nowMaps.resolve)\r\n        }\r\n      } else {\r\n        this.initDataTree()\r\n      }\r\n    },\r\n    // 初始化/刷新树（无论懒加载与否，初始时都会调用）\r\n    async initDataTree(parentId = -1) {\r\n      this.loading = true\r\n      try {\r\n        var view = this.keyWord.view\r\n        var parentNode = { id: parentId, allNodeNames: '' }\r\n        const res = await treeAPI.getAllNodes({\r\n          keyWords: view,\r\n          parentId: parentNode.id,\r\n          virtualRootFlag: this.virtualRootFlag,\r\n          searchKey: this.searchKey,\r\n          lazy: this.lazy,\r\n          preName: parentNode.allNodeNames,\r\n          sort: this.sort\r\n        })\r\n        this.treeTableData = res.data\r\n      } catch (error) {\r\n        this.loading = false\r\n        console.log(error)\r\n      }\r\n      this.loading = false\r\n    },\r\n    // #endregion\r\n\r\n    // #region 选择相关\r\n    // 监听选中的事件\r\n    handleSelection(selection, row) {\r\n      // this.$refs['dataTBLMother'].handleSelection(selection, row)\r\n      if (selection.indexOf(row) !== -1) {\r\n        this.selectChange(selection, row, true, true)\r\n      } else {\r\n        this.selectChange(selection, row, false, true)\r\n      }\r\n      this.$emit('update:selectedColumns', selection)\r\n    },\r\n    // 监听选中的事件\r\n    handleSelectionChange(selection) {\r\n      this.selectedColumns = selection\r\n    },\r\n    // 全选\r\n    handleSelectionAll(selection) {\r\n      this.isAllSelect = !this.isAllSelect\r\n      if (this.isAllSelect) {\r\n        selection.forEach(val => {\r\n          this.selectChange(selection, val, true, false)\r\n        })\r\n      } else {\r\n        this.$refs['dataTree'].clearSelection()\r\n        selection = []\r\n      }\r\n      this.$emit('update:selectedColumns', selection)\r\n    },\r\n    selectChange(selection, row, isChecked, notAll) {\r\n      if (row.children && row.children.length) {\r\n        row.children.forEach(val => {\r\n          this.$refs['dataTree'].toggleRowSelection(val, isChecked)\r\n          if (notAll) {\r\n            isChecked\r\n              ? selection.push(val)\r\n              : selection.splice(selection.indexOf(val), 1)\r\n          }\r\n          if (row.children && row.children.length) {\r\n            this.selectChange(selection, val, isChecked, notAll)\r\n          }\r\n        })\r\n      }\r\n    },\r\n    // #endregion\r\n    // 按钮新增\r\n    async appendClick(row) {\r\n      this.$emit('append-click', row)\r\n    },\r\n    // 按钮修改\r\n    async editClick(row) {\r\n      this.$emit('edit-click', row)\r\n    },\r\n    // 按钮删除\r\n    async deleteClick(row) {\r\n      if (Object.prototype.hasOwnProperty.call(this.thisEvents, 'delete-click')) {\r\n        this.$emit('delete-click', row)\r\n      } else {\r\n        this.loading = true\r\n        await treeAPI.delManyNode(this.keyWord.edit, row)\r\n        this.$refs['dataTree'].clearSelection()\r\n        this.updatePartTree(row[0])\r\n        this.$message.success('删除成功！')\r\n        this.loading = false\r\n      }\r\n    },\r\n    // 删除\r\n    remove(row) {\r\n      this.$refs['dataTBLMother'].remove(row)\r\n    },\r\n    // 移动节点\r\n    async changeNodes(direction, node) {\r\n      this.loading = true\r\n      const resp = await treeAPI.getAllBrotherIndex(this.keyWord.edit, node.id)\r\n      const nodes = resp.data\r\n      const index = nodes.findIndex(item => item.id === node.id)\r\n      if (direction === 'up' && index === 0) {\r\n        this.$message.warning('当前节点是第一个节点，无法上移！')\r\n      } else if (direction === 'down' && index === nodes.length - 1) {\r\n        this.$message.warning('当前节点是最后一个节点，无法下移！')\r\n      } else {\r\n        const changeId = direction === 'up' ? nodes[index - 1].id : nodes[index + 1].id\r\n        await treeAPI.changeTwoNodes(this.keyWord.edit, node.id, changeId)\r\n        await this.updatePartTree(node)\r\n        this.$message.success('移动成功！')\r\n      }\r\n      this.loading = false\r\n    },\r\n    // 监听点击某一行事件\r\n    handleNodeClick(val) {\r\n      this.$emit('node-click', val)\r\n    },\r\n    uploadFinish() {\r\n      this.initDataTree()\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"sourceRoot":"src/components"}]}