{"remainingRequest":"D:\\software\\front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\software\\front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\software\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\software\\front\\src\\views\\website-page\\pages\\Homepage.vue?vue&type=template&id=4a1564c6&scoped=true&","dependencies":[{"path":"D:\\software\\front\\src\\views\\website-page\\pages\\Homepage.vue","mtime":1702088114939},{"path":"D:\\software\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\software\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}