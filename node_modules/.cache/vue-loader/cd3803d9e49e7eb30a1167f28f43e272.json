{"remainingRequest":"D:\\software\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\software\\front\\src\\components\\DlgBasic.vue?vue&type=style&index=0&id=5567d33f&lang=scss&scoped=true&","dependencies":[{"path":"D:\\software\\front\\src\\components\\DlgBasic.vue","mtime":1670666519432},{"path":"D:\\software\\front\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\front\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\software\\front\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\software\\front\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi52aWV3LWRpYWxvZyB7DQogIDo6di1kZWVwIC5lbC1kaWFsb2dfX2JvZHkgew0KICAgIG1heC1oZWlnaHQ6IHVuc2V0Ow0KICAgIGhlaWdodDogY2FsYygxMDB2aCAtIDEwOHB4KTsNCiAgfQ0KfQ0K"},{"version":3,"sources":["DlgBasic.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmVA;AACA;AACA;AACA;AACA;AACA","file":"DlgBasic.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <el-dialog v-dialogDrag append-to-body :visible.sync=\"dialogShow\" :close-on-click-modal=\"false\" :close-on-press-escape=\"false\" :modal-append-to-body=\"false\" :class=\"autoMax ? 'view-dialog' : ''\" :fullscreen=\"autoMax\" :before-close=\"beforeCloseDlg\" :width=\"width\" :height=\"height\" @opened=\"openFun\" @close=\"closeDlg\">\r\n    <template #title>\r\n      <!-- <span>{{ dialog.title + dlgSuffix }}</span> -->\r\n      <span>{{ dlgTitle + dlgSuffix }}</span>\r\n      <svg-icon v-if=\"needMaxBtn\" class=\"fullscreen\" icon-class=\"fullscreen\" @click=\"clickFull\" />\r\n    </template>\r\n    <slot ref=\"mainForm\" name=\"mainForm\">默认值</slot>\r\n    <div v-if=\"!noFooter\" slot=\"footer\" class=\"dialog-footer\">\r\n      <slot name=\"otherBtn\" />\r\n      <el-button v-if=\"buttonProps.cancel.show\" size=\"small\" :type=\"buttonProps.cancel.type\" @click=\"beforeCloseDlg\">{{ buttonProps.cancel.name }}</el-button>\r\n      <el-button v-if=\"buttonProps.close.show\" size=\"small\" :type=\"buttonProps.close.type\" @click=\"beforeCloseDlg\">{{ buttonProps.close.name }}</el-button>\r\n      <el-button v-if=\"buttonProps.confirm.show\" :disabled=\"needValidate && validate\" :type=\"buttonProps.confirm.type\" size=\"small\" :loading=\"buttonLoading.confirm\" @click.native.prevent=\"onConfirm\">{{ buttonProps.confirm.name }}</el-button>\r\n      <el-button v-if=\"buttonProps.last.show\" :type=\"buttonProps.last.type\" size=\"small\" :loading=\"buttonLoading.last\" @click.native.prevent=\"onModalLast\">{{ buttonProps.last.name }}</el-button>\r\n      <el-button v-if=\"buttonProps.next.show\" :type=\"buttonProps.next.type\" size=\"small\" :loading=\"buttonLoading.next\" @click.native.prevent=\"onModalNext\">{{ buttonProps.next.name }}</el-button>\r\n      <el-button v-if=\"buttonProps.finish.show\" :type=\"buttonProps.finish.type\" size=\"small\" :loading=\"buttonLoading.finish\" @click=\"beforeCloseDlg\">{{ buttonProps.finish.name }}</el-button>\r\n      <el-button v-if=\"buttonProps.submit.show\" :disabled=\"needValidate && validate\" :type=\"buttonProps.submit.type\" size=\"small\" :loading=\"buttonLoading.submit\" @click.native.prevent=\"onModalSubmit\">{{ buttonProps.submit.name }}</el-button>\r\n      <el-button v-if=\"buttonProps.repeatAdd.show && option === 'append'\" :disabled=\"needValidate && validate\" :type=\"buttonProps.repeatAdd.type\" size=\"small\" :loading=\"buttonLoading.repeatAdd\" @click.native.prevent=\"onModalRepeatAdd\">{{ buttonProps.repeatAdd.name }}</el-button>\r\n    </div>\r\n  </el-dialog>\r\n</template>\r\n<script>\r\n\r\nimport { arrangeButton } from '@/utils/common'\r\nimport _ from 'lodash'\r\nexport default {\r\n  name: 'DlgBasic',\r\n  props: {\r\n    defaultProps: {\r\n      type: Object,\r\n      default: () => {\r\n        return {\r\n          form: { }, // 基本form\r\n          width: '40%', // 宽度\r\n          height: '', // 高度\r\n          dlgTitle: '',\r\n          dlgSuffix: '', // 窗口标题后缀\r\n          footButtons: { }, // 底部按钮情况\r\n          someFlags: {\r\n            noFooter: false, // 没有底部按钮\r\n            autoMax: false, // 是否自动最大化\r\n            needMaxBtn: false, // 是否需要最大化按钮\r\n            needValidate: true,\r\n            validate: true,\r\n            needVerifyUpdate: true\r\n          }\r\n        }\r\n      }\r\n    },\r\n    dlgbasicSpecConfirm: { type: Function, default: null },\r\n    dlgbasicConfirm: { type: Function, default: null },\r\n    dlgbasicRepeatAdd: { type: Function, default: null },\r\n    dlgbasicSpecSubmit: { type: Function, default: null },\r\n    dlgbasicSubmit: { type: Function, default: null }\r\n\r\n  },\r\n  data() {\r\n    return {\r\n      form: {},\r\n      thisEvents: '',\r\n      continueFlag: false,\r\n      currentSave: false, // 当前是否有数据修改，决定是否保存更新\r\n      dialogShow: false, // 当前窗口的显示隐藏属性\r\n      validate: true,\r\n      buttonLoading: { confirm: false, submit: false, repeatAdd: false, last: false, next: false, finish: false },\r\n      oldData: Object,\r\n      type: ''\r\n    }\r\n  },\r\n  computed: {\r\n    dialog() {\r\n      return this.defaultProps.dialog ? this.defaultProps.dialog : { }\r\n    },\r\n    dlgTitle() {\r\n      if (this.defaultProps.dlgTitle) {\r\n        return this.defaultProps.dlgTitle\r\n      } else {\r\n        if (Object.prototype.hasOwnProperty.call(this.form, 'id') && this.form.id != null && this.form.id !== 0) {\r\n          return '编辑/查看'\r\n        } else {\r\n          return '新增'\r\n        }\r\n      }\r\n    },\r\n    option() { // 目前三种类型，edit append audit\r\n      if (this.defaultProps.option) {\r\n        return this.defaultProps.option\r\n      } else {\r\n        if (Object.prototype.hasOwnProperty.call(this.form, 'id') && this.form.id != null && this.form.id !== 0) {\r\n          return 'edit'\r\n        } else {\r\n          return 'append'\r\n        }\r\n      }\r\n    },\r\n    width() {\r\n      return this.defaultProps.width ? this.defaultProps.width : '40%'\r\n    },\r\n    height() {\r\n      return this.defaultProps.height ? this.defaultProps.height : ''\r\n    },\r\n    dlgSuffix() {\r\n      return this.defaultProps.dlgSuffix ? this.defaultProps.dlgSuffix : ''\r\n    },\r\n    footButtons() {\r\n      return this.defaultProps.footButtons ? this.defaultProps.footButtons : {}\r\n    },\r\n    buttonProps: {\r\n      get() {\r\n        var btn = {\r\n          cancel: { show: true, name: '取 消', type: '' },\r\n          close: { show: false, name: '关 闭', type: 'info' },\r\n          confirm: { show: true, name: '保 存', type: 'primary' },\r\n          submit: { show: false, name: '提 交', type: 'success' },\r\n          last: { show: false, name: '上一步', type: 'primary' },\r\n          next: { show: false, name: '下一步', type: 'success' },\r\n          finish: { show: false, name: '完成', type: 'danger' },\r\n          repeatAdd: { show: true, name: '继续添加', type: 'warning' }\r\n        }\r\n        return arrangeButton(this.footButtons, btn)\r\n      },\r\n      set() {}\r\n    },\r\n    noFooter() {\r\n      if (Object.prototype.hasOwnProperty.call(this.defaultProps, 'someFlags')) {\r\n        if (Object.prototype.hasOwnProperty.call(this.defaultProps.someFlags, 'noFooter')) {\r\n          return this.defaultProps.someFlags.noFooter\r\n        }\r\n      }\r\n      return false\r\n    },\r\n    autoMax: {\r\n      get(val) {\r\n        if (Object.prototype.hasOwnProperty.call(this.defaultProps, 'someFlags')) {\r\n          if (Object.prototype.hasOwnProperty.call(this.defaultProps.someFlags, 'autoMax')) {\r\n            return this.defaultProps.someFlags.autoMax\r\n          }\r\n        }\r\n        return false\r\n      },\r\n      set(val) {\r\n        this.$set(this.defaultProps.someFlags, 'autoMax', val)\r\n      }\r\n    },\r\n    needMaxBtn() {\r\n      if (Object.prototype.hasOwnProperty.call(this.defaultProps, 'someFlags')) {\r\n        if (Object.prototype.hasOwnProperty.call(this.defaultProps.someFlags, 'needMaxBtn')) {\r\n          return this.defaultProps.someFlags.needMaxBtn\r\n        }\r\n      }\r\n      return false\r\n    },\r\n    needValidate() {\r\n      if (Object.prototype.hasOwnProperty.call(this.defaultProps, 'someFlags')) {\r\n        if (Object.prototype.hasOwnProperty.call(this.defaultProps.someFlags, 'needValidate')) {\r\n          return this.defaultProps.someFlags.needValidate\r\n        }\r\n      }\r\n      return true\r\n    },\r\n    // validate: {\r\n    //   get() {\r\n    //     if (this.defaultProps.hasOwnProperty('someFlags')) {\r\n    //       if (this.defaultProps.someFlags.hasOwnProperty('validate')) {\r\n    //         return this.defaultProps.someFlags.validate\r\n    //       }\r\n    //     }\r\n    //     return true\r\n    //   },\r\n    //   set() {\r\n\r\n    //   }\r\n    // },\r\n    autoSaveClose() {\r\n      if (Object.prototype.hasOwnProperty.call(this.defaultProps, 'someFlags')) {\r\n        if (Object.prototype.hasOwnProperty.call(this.defaultProps.someFlags, 'autoSaveClose')) {\r\n          return this.defaultProps.someFlags.autoSaveClose\r\n        }\r\n      }\r\n      return true\r\n    },\r\n    needVerifyUpdate() {\r\n      if (Object.prototype.hasOwnProperty.call(this.defaultProps, 'someFlags')) {\r\n        if (Object.prototype.hasOwnProperty.call(this.defaultProps.someFlags, 'needVerifyUpdate')) {\r\n          return this.defaultProps.someFlags.needVerifyUpdate\r\n        }\r\n      }\r\n      return true\r\n    }\r\n  },\r\n  watch: {\r\n    defaultProps: {\r\n      handler(val) {\r\n        // this.dialog = val.dialog\r\n        // this.form = val.form\r\n        // this.someFlags = _.merge(this.someFlags, val.someFlags)\r\n        // this.footButtons = val.footButtons\r\n      },\r\n      deep: true,\r\n      immediate: true\r\n    },\r\n    form: {\r\n      handler(val) {\r\n\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.thisEvents = JSON.parse(JSON.stringify(this._events))\r\n  },\r\n  methods: {\r\n    // #region  本view调用\r\n    cloneOldData() {\r\n      // this.currentSave = false\r\n      this.oldData = _.cloneDeep(this.form)\r\n    },\r\n    // #endregion\r\n    showDialog(val, form = { }) {\r\n      this.form = form\r\n      if (val) {\r\n        this.currentSave = false\r\n      }\r\n      this.dialogShow = val\r\n    },\r\n    // 窗口打开\r\n    openFun() {\r\n      // 弹框回调\r\n      this.cloneOldData()\r\n      this.$emit('open-dialog', this.form)\r\n    },\r\n\r\n    // #region 按钮确认，可以让外层直接执行spec-confirm，也可以执行完后在外层执行confirm,stop\r\n    async _onConfirm() {\r\n      if (JSON.stringify(this.oldData) !== JSON.stringify(this.form)) { // 数据有修改\r\n        this.currentSave = true\r\n        if (this.dlgbasicConfirm && typeof this.dlgbasicConfirm === 'function') {\r\n          this.type = 'stop'\r\n          await this.dlgbasicConfirm(this.option, this.type)\r\n        }\r\n        if (this.autoSaveClose && this.type === 'stop') { // 有修改，判断一下是否关闭窗口\r\n          this.dialogShow = false\r\n        }\r\n      } else { // 没有修改，永远关闭窗口\r\n        this.dialogShow = false\r\n      }\r\n      // if (this.autoSaveClose && this.type=='stop') {\r\n      //   this.dialogShow = false\r\n      // } else {\r\n      //   console.log(this.form)\r\n      // }\r\n    },\r\n    // 确定按钮逻辑：\r\n    // 1, 如果该窗口用于一些特殊处理，而不是简单的保存，直接外层调用spec-confirm，否则在外层直接调用_onConfirm，先判断是否有数据修改，再回到外层调用保存方法\r\n    async onConfirm() {\r\n      this.$set(this.buttonLoading, 'confirm', true)\r\n      if (!(this.dlgbasicSpecConfirm && typeof this.dlgbasicSpecConfirm === 'function')) {\r\n        await this._onConfirm()\r\n      } else {\r\n        this.type = 'stop'\r\n        await this.dlgbasicSpecConfirm(this.option, this.type)\r\n      }\r\n      this.$set(this.buttonLoading, 'confirm', false)\r\n    },\r\n    // #endregion\r\n\r\n    // #region 按钮新增，可以让外层直接执行spec-append-confirm，也可以执行完后在外层执行confirm,continue\r\n    async _onModalRepeatAdd() {\r\n      if (JSON.stringify(this.oldData) !== JSON.stringify(this.form)) { // 数据有修改\r\n        this.currentSave = true\r\n        if (this.dlgbasicConfirm && typeof this.dlgbasicConfirm === 'function') {\r\n          this.type = 'continue'\r\n          await this.dlgbasicConfirm(this.option, this.type)\r\n        }\r\n      } else {\r\n        this.$message.warning('尚未填写任何内容，无法新增！')\r\n      }\r\n    },\r\n    async onModalRepeatAdd() {\r\n      this.$set(this.buttonLoading, 'repeatAdd', true)\r\n      if (this.dlgbasicRepeatAdd && typeof this.dlgbasicRepeatAdd === 'function') {\r\n        await this.dlgbasicRepeatAdd()\r\n      } else {\r\n        await this._onModalRepeatAdd()\r\n      }\r\n      this.$set(this.buttonLoading, 'repeatAdd', false)\r\n    },\r\n    // #endregion\r\n\r\n    // 按钮提交，可以让外层直接执行spec-submit，也可以执行完后在外层执行submit,stop\r\n    async onModalSubmit() {\r\n      this.$set(this.buttonLoading, 'submit', true)\r\n      if (this.dlgbasicSpecSubmit && typeof this.dlgbasicSpecSubmit === 'function') {\r\n        await this.dlgbasicSpecSubmit()\r\n        this.$set(this.buttonLoading, 'submit', false)\r\n      } else {\r\n        this.$confirm('提交以后不能修改，确定提交吗？', '注意')\r\n          .then(async _ => {\r\n            this.currentSave = true\r\n            await this.dlgbasicSubmit()\r\n            this.$set(this.buttonLoading, 'submit', false)\r\n          }).catch(_ => { this.$set(this.buttonLoading, 'submit', false) })\r\n      }\r\n    },\r\n    // 窗口关闭退出前的判断\r\n    beforeCloseDlg() {\r\n      if (this.needVerifyUpdate) {\r\n        if (JSON.stringify(this.oldData) !== JSON.stringify(this.form)) {\r\n          this.$confirm('数据已经修改，确认不保存退出吗？', '注意')\r\n            .then(_ => {\r\n              this.dialogShow = false\r\n            })\r\n            .catch(_ => {})\r\n        } else {\r\n          this.dialogShow = false\r\n        }\r\n      } else {\r\n        this.dialogShow = false\r\n      }\r\n    },\r\n    onModalLast() {\r\n      this.type = 'continue'\r\n      this.$emit('last-step', 'contine')\r\n    },\r\n    onModalNext() {\r\n      this.type = 'continue'\r\n      this.$emit('next-step', 'contine')\r\n    },\r\n    clickFull() {\r\n      this.autoMax = !this.autoMax\r\n      this.$emit('resize-dialog', this.autoMax)\r\n    },\r\n    closeDlg() {\r\n      this.$emit('close-dialog', this.currentSave)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.view-dialog {\r\n  ::v-deep .el-dialog__body {\r\n    max-height: unset;\r\n    height: calc(100vh - 108px);\r\n  }\r\n}\r\n</style>\r\n"]}]}