{"remainingRequest":"D:\\software\\front\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\software\\front\\front\\src\\views\\dialogs\\DlgBatchImport.vue?vue&type=style&index=0&id=49a80784&lang=scss&scoped=true&","dependencies":[{"path":"D:\\software\\front\\front\\src\\views\\dialogs\\DlgBatchImport.vue","mtime":1715830118043},{"path":"D:\\software\\front\\front\\node_modules\\css-loader\\dist\\cjs.js","mtime":1715830112594},{"path":"D:\\software\\front\\front\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1715830117510},{"path":"D:\\software\\front\\front\\node_modules\\postcss-loader\\src\\index.js","mtime":1715830115271},{"path":"D:\\software\\front\\front\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1715830116699},{"path":"D:\\software\\front\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1715830111371},{"path":"D:\\software\\front\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":1715830117510}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCkBpbXBvcnQgIn5AL2Fzc2V0cy9jc3MvdmFyaWFibGVzLnNjc3MiOw0KDQo6OnYtZGVlcCAuZWwtZGlhbG9nX19ib2R5IHsNCiAgZGlzcGxheTogZmxleDsNCiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQp9DQouZWwtdXBsb2FkX190aXAgew0KICBkaXNwbGF5OiBmbGV4Ow0KICAuZG93bmxvYWQgew0KICAgIG1hcmdpbi1yaWdodDogNXB4Ow0KICAgIGNvbG9yOiAkLS1jb2xvci1wcmltYXJ5Ow0KICAgIGN1cnNvcjogcG9pbnRlcjsNCiAgfQ0KfQ0KLnZpZXctZGlhbG9nIHsNCiAgOjp2LWRlZXAgLmVsLWRpYWxvZ19fYm9keSB7DQogICAgbWF4LWhlaWdodDogdW5zZXQ7DQogICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gMTA4cHgpOw0KICB9DQp9DQo="},{"version":3,"sources":["DlgBatchImport.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwHA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"DlgBatchImport.vue","sourceRoot":"src/views/dialogs","sourcesContent":["<template>\r\n  <DlgBasic :dialog=\"importDialog\" :digbasic-submit=\"submit\">\r\n    <template slot=\"mainForm\">\r\n      <el-upload class=\"upload-demo\" drag action :limit=\"1\" :show-file-list=\"true\" :http-request=\"()=>{}\" :on-exceed=\"handleExceed\" :before-upload=\"beforeUpload\" :on-remove=\"()=>file={}\">\r\n        <i class=\"el-icon-upload\" />\r\n        <div class=\"el-upload__text\">将文件拖到此处，或<em>点击上传</em></div>\r\n        <div v-show=\"noFile\" slot=\"tip\" class=\"el-upload__tip\" style=\"color:red\">请上传文件！</div>\r\n        <div v-if=\"isNeedExport\" slot=\"tip\" class=\"el-upload__tip\">请先进行<span class=\"download\">“导出”</span>或<span class=\"download\">“全部导出”</span>操作获取模板</div>\r\n        <div slot=\"tip\" class=\"el-upload__tip\">\r\n          <span v-show=\"!isNeedExport\" class=\"download\" @click=\"downloadTemplate\">下载模板</span>\r\n          <span>导入文件不能超过5M，仅允许导入“xls”或“xlsx”格式文件</span>\r\n        </div>\r\n      </el-upload>\r\n    </template>\r\n  </DlgBasic>\r\n</template>\r\n\r\n<script>\r\nimport commonAPI from '@/api/file'\r\nimport { getTemplateFile } from '@/utils/common'\r\nimport IEAPI from '@/api/importAndExport'\r\nimport DlgBasic from '@/components/DlgBasic'\r\n\r\nexport default {\r\n  name: 'DlgBatchImport',\r\n  components: { DlgBasic },\r\n  props: {\r\n    importDialog: { type: Object, default: () => { } },\r\n    templateFile: {\r\n      type: Object, default: () => { return { id: null, name: '' } }\r\n    },\r\n    // 是否需要先执行导出操作\r\n    isNeedExport: { type: Boolean, default: false },\r\n    keyWords: { type: String, default: '' }\r\n  },\r\n  data() {\r\n    return {\r\n      file: {},\r\n      fileFlag: false,\r\n      dialogFull: false,\r\n      comfimLoading: false\r\n    }\r\n  },\r\n  computed: {\r\n    noFile() {\r\n      if (!this.file.type && this.fileFlag) return true\r\n      return false\r\n    }\r\n  },\r\n  methods: {\r\n    // The parameter of the hook before uploading a file is the uploaded file.\r\n    // If false or promise is returned and rejected, the upload will stop.\r\n    // 上传文件前调用的钩子函数\r\n    beforeUpload(file) {\r\n      const fileTypes = ['xls', 'xlsx']\r\n      const splitArr = file.name.split('.')\r\n      const fileType = splitArr[splitArr.length - 1]\r\n      const isLtSize = file.size / 1024 / 1024 < this.CONSTANT.FILE_MAX_SIZE\r\n\r\n      if (!fileTypes.includes(fileType)) {\r\n        return this.$message.error('上传文件只能是 xls/xlsx 格式!')\r\n      }\r\n      if (!isLtSize) {\r\n        return this.$message.error(`上传图片大小不能超过 ${this.CONSTANT.FILE_MAX_SIZE} MB!`)\r\n      }\r\n      this.fileFlag = false\r\n      this.file = file\r\n    },\r\n    // 上传文件数量超过限制时触发的钩子函数\r\n    // Hook when the number of files exceeds the limit\r\n    handleExceed(files, fileList) {\r\n      this.$message.warning('当前限制选择 1 个文件，请删除后继续上传')\r\n    },\r\n    // 关闭弹窗\r\n    // Close the pop-up window\r\n    closeDialog() {\r\n      this.importDialog.show = false\r\n    },\r\n    // Download the template, judge which interface to call according to different bellongpage fields,\r\n    // and obtain the templates belonging to different pages\r\n    async downloadTemplate() {\r\n      const templateFile = getTemplateFile(this.keyWords, '.xlsx')\r\n      try {\r\n        this.importDialog.show = false\r\n        this.fullScreenLoading()\r\n        const content = await commonAPI.downloadFile(templateFile.id)\r\n        this.fullScreenLoading().close()\r\n        this.downloadFile(content, templateFile.name)\r\n      } catch (error) {\r\n        this.fullScreenLoading().close()\r\n      }\r\n    },\r\n    // Override the default upload behavior and customize the implementation of upload\r\n    // According to different bellongpage fields, determine which page's upload interface to call,\r\n    // or change it to emit event to process the event on each page, depending on the requirements\r\n    // 确认上传\r\n    async submit() {\r\n      if (!this.file.type) {\r\n        return (this.fileFlag = true)\r\n      }\r\n      try {\r\n        this.comfimLoading = true\r\n        this.importDialog.show = false\r\n        this.fullScreenLoading()\r\n        await IEAPI.importInfo(this.keyWords, this.file)\r\n        this.comfimLoading = false\r\n        this.fullScreenLoading().close()\r\n        this.$message.success('导入成功')\r\n        this.$parent.$refs.dataTableList.$refs.table.clearSelection()\r\n        this.$parent.$refs.dataTableList.initDataList()\r\n      } catch (error) {\r\n        this.fullScreenLoading().close()\r\n      }\r\n      this.file = {}\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import \"~@/assets/css/variables.scss\";\r\n\r\n::v-deep .el-dialog__body {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n.el-upload__tip {\r\n  display: flex;\r\n  .download {\r\n    margin-right: 5px;\r\n    color: $--color-primary;\r\n    cursor: pointer;\r\n  }\r\n}\r\n.view-dialog {\r\n  ::v-deep .el-dialog__body {\r\n    max-height: unset;\r\n    height: calc(100vh - 108px);\r\n  }\r\n}\r\n</style>\r\n"]}]}