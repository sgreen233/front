{"remainingRequest":"D:\\software\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\software\\front\\src\\components\\SimpleTreeSelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\software\\front\\src\\components\\SimpleTreeSelect.vue","mtime":1670666519533},{"path":"D:\\software\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\front\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\software\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KDQovLyBjYXNjYWRlcuayoeaciWxvYWRpbmflsZ7mgKcNCmltcG9ydCB0cmVlQVBJIGZyb20gJ0AvYXBpL3RyZWUnDQppbXBvcnQgXyBmcm9tICdsb2Rhc2gnDQoNCmV4cG9ydCBkZWZhdWx0IHsNCiAgbmFtZTogJ1NpbXBsZVRyZWVTZWxlY3QnLA0KICBwcm9wczogew0KICAgIHZhbHVlOiB7IHR5cGU6IE51bWJlciwgZGVmYXVsdDogKCkgPT4gbnVsbCB9LCAvLyDniLbnuqcgdi1tb2RlbCDnu5HlrprlgLzvvIjlkI7nq6/ov5Tlm57nmoQgaWQg5YC877yJDQogICAgZmllbGQ6IHsgdHlwZTogU3RyaW5nLCBkZWZhdWx0OiAnJyB9LA0KICAgIGtleVdvcmRzOiB7IHR5cGU6IFN0cmluZywgZGVmYXVsdDogJycgfSwgLy8g5pCc57Si57qn6IGU6YCJ6aG55YWz6ZSu5a2XDQogICAgcGxhY2Vob2xkZXI6IHsgdHlwZTogU3RyaW5nLCBkZWZhdWx0OiAn6K+36YCJ5oupJyB9LA0KICAgIGNoZWNrU3RyaWN0bHk6IHsgdHlwZTogQm9vbGVhbiwgZGVmYXVsdDogdHJ1ZSB9LCAvLyDmmK/lkKbkuKXmoLznmoTpgbXlrojniLblrZDoioLngrnkuI3kupLnm7jlhbPogZQNCiAgICBzaXplOiB7IHR5cGU6IFN0cmluZywgZGVmYXVsdDogJycgfSwNCiAgICBzZWFyY2hLZXlzOiB7IHR5cGU6IE9iamVjdCwgZGVmYXVsdDogKCkgPT4ge30gfSwNCiAgICBsYXp5OiB7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IHRydWUgfSwNCiAgICBtdWx0aXBsZTogeyB0eXBlOiBCb29sZWFuLCBkZWZhdWx0OiBmYWxzZSB9DQogIH0sDQogIGRhdGEoKSB7DQogICAgcmV0dXJuIHsNCiAgICAgIGlzU2hvd0luZm86IHRydWUsDQogICAgICBhcnJWYWw6IHRoaXMudmFsdWUsDQogICAgICB2YWxUZW1wOiBbXSwNCiAgICAgIG9wdGlvbnM6IFtdLCAvLyDlm57mmL7lpIfpgInpobkNCiAgICAgIGxvYWRpbmc6IHRydWUsDQogICAgICBwcm9wczogew0KICAgICAgICBsYWJlbDogJ25hbWUnLA0KICAgICAgICB2YWx1ZTogJ2lkJywNCiAgICAgICAgY2hpbGRyZW46ICdjaGlsZHJlbicsDQogICAgICAgIGNoZWNrU3RyaWN0bHk6IHRoaXMuY2hlY2tTdHJpY3RseSwNCiAgICAgICAgbGF6eTogdGhpcy5sYXp5LA0KICAgICAgICBsYXp5TG9hZDogdGhpcy5sYXp5TG9hZA0KICAgICAgfQ0KICAgIH0NCiAgfSwNCiAgd2F0Y2g6IHsNCiAgICAvLyDpgJrov4d2YWx1Zea/gOWPkWluaXRPcHRpb25zDQogICAgdmFsdWU6IHsNCiAgICAgIGFzeW5jIGhhbmRsZXIodmFsKSB7DQogICAgICAgIHRoaXMuY2hhbmdlU2VsZWN0aW9uKCkNCiAgICAgIH0sDQogICAgICBkZWVwOiB0cnVlLA0KICAgICAgaW1tZWRpYXRlOiB0cnVlDQogICAgfQ0KICB9LA0KICBtZXRob2RzOiB7DQogICAgYXN5bmMgY2hhbmdlU2VsZWN0aW9uKCkgew0KICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZQ0KICAgICAgaWYgKHRoaXMudmFsdWUpIHsNCiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdHJlZUFQSS5nZXRBbGxQYXJlbnRJbmRleCh0aGlzLmtleVdvcmRzLCB0aGlzLnZhbHVlKQ0KICAgICAgICBpZiAocmVzLmRhdGEubGVuZ3RoID4gMCkgew0KICAgICAgICAgIHRoaXMudmFsVGVtcCA9IHJlcy5kYXRhLm1hcChpdGVtID0+IGl0ZW0uaWQpLnJldmVyc2UoKQ0KICAgICAgICB9DQogICAgICB9IGVsc2Ugew0KICAgICAgICB0aGlzLnZhbFRlbXAgPSBbXQ0KICAgICAgfQ0KICAgICAgYXdhaXQgdGhpcy5pbml0T3B0aW9ucygpDQoNCiAgICAgIGlmICh0aGlzLmxhenkpIHsNCiAgICAgICAgdGhpcy5pc1Nob3dJbmZvID0gZmFsc2UNCiAgICAgICAgdGhpcy5hcnJWYWwgPSBbLi4udGhpcy52YWxUZW1wXQ0KICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7DQogICAgICAgICAgdGhpcy5pc1Nob3dJbmZvID0gdHJ1ZQ0KICAgICAgICB9KQ0KICAgICAgfQ0KICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2UNCiAgICB9LA0KICAgIGFzeW5jIGluaXRPcHRpb25zKHNlYXJjaEtleSkgew0KICAgICAgaWYgKHNlYXJjaEtleSAhPSBudWxsKSB7DQogICAgICAgIHRoaXMuc2VhcmNoS2V5cyA9IHNlYXJjaEtleQ0KICAgICAgfQ0KICAgICAgdHJ5IHsNCiAgICAgICAgaWYgKCF0aGlzLmxhenkpIHsgLy8g5LiN5piv5oeS5Yqg6L29DQogICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5sZW5ndGggPT09IDApIHsgLy8g5rKh5pyJ5Yqg6L296L+HLOebtOaOpeWKoOi9veWujA0KICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdHJlZUFQSS5nZXRBbGxOb2Rlcyh7DQogICAgICAgICAgICAgIGtleVdvcmRzOiB0aGlzLmtleVdvcmRzLA0KICAgICAgICAgICAgICB2aXJ0dWFsUm9vdEZsYWc6IGZhbHNlLA0KICAgICAgICAgICAgICBzZWFyY2hLZXk6IHRoaXMuc2VhcmNoS2V5cywNCiAgICAgICAgICAgICAgbGF6eTogZmFsc2UNCiAgICAgICAgICAgIH0pDQogICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSByZXMuZGF0YQ0KICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIHsgLy8g5oeS5Yqg6L29DQogICAgICAgICAgdmFyIGFyck5vdyA9IF8uY2xvbmVEZWVwKHRoaXMudmFsVGVtcCkNCiAgICAgICAgICBhcnJOb3cudW5zaGlmdCgtMSkNCiAgICAgICAgICBhcnJOb3cucG9wKCkNCiAgICAgICAgICBhcnJOb3cucmV2ZXJzZSgpDQogICAgICAgICAgdmFyIHJlcyA9IFtdDQogICAgICAgICAgdmFyIGxhc3RSZXMgPSBbXQ0KICAgICAgICAgIHZhciBsYXN0UGFyZW50ID0gMA0KICAgICAgICAgIHRoaXMub3B0aW9ucyA9IFtdDQogICAgICAgICAgYXJyTm93LmZvckVhY2goYXN5bmMgZWxlbWVudCA9PiB7DQogICAgICAgICAgICByZXMgPSBhd2FpdCB0cmVlQVBJLmdldEFsbE5vZGVzKHsNCiAgICAgICAgICAgICAga2V5V29yZHM6IHRoaXMua2V5V29yZHMsDQogICAgICAgICAgICAgIHZpcnR1YWxSb290RmxhZzogZmFsc2UsDQogICAgICAgICAgICAgIHNlYXJjaEtleTogc2VhcmNoS2V5LA0KICAgICAgICAgICAgICBsYXp5OiB0cnVlLA0KICAgICAgICAgICAgICBwYXJlbnRJZDogZWxlbWVudA0KICAgICAgICAgICAgfSkNCiAgICAgICAgICAgIHJlcyA9IHJlcy5kYXRhDQogICAgICAgICAgICBpZiAobGFzdFBhcmVudCAhPT0gMCkgew0KICAgICAgICAgICAgICByZXMuZm9yRWFjaChlbCA9PiB7DQogICAgICAgICAgICAgICAgaWYgKGVsLmlkID09PSBlbGVtZW50KSB7DQogICAgICAgICAgICAgICAgICBlbC5jaGlsZHJlbi5wdXNoKGxhc3RSZXMpDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgbGFzdFJlcyA9IF8uY2xvbmVEZWVwKHJlcykNCiAgICAgICAgICAgIGxhc3RQYXJlbnQgPSBlbGVtZW50DQogICAgICAgICAgfSkNCiAgICAgICAgICB0aGlzLm9wdGlvbnMgPSByZXMNCiAgICAgICAgfQ0KICAgICAgfSBjYXRjaCAoZXJyb3IpIHsgY29uc29sZS5sb2coZXJyb3IpIH0NCiAgICB9LA0KICAgIC8vIGxpc3RUb1RyZWUobGlzdCkgew0KICAgIC8vICAgY29uc3QgY2xvbmVEYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShsaXN0KSkgLy8g5a+55rqQ5pWw5o2u5rex5bqm5YWL6ZqGDQogICAgLy8gICByZXR1cm4gY2xvbmVEYXRhLmZpbHRlcihwYXJlbnQgPT4geyAvLyDlvqrnjq/miYDmnInpobnvvIzlubbmt7vliqBjaGlsZHJlbuWxnuaApw0KICAgIC8vICAgICBjb25zdCBicmFuY2hBcnIgPSBjbG9uZURhdGEuZmlsdGVyKGNoaWxkID0+IHBhcmVudFsnaWQnXSA9PT0gY2hpbGRbJ3BhcmVudElkJ10pIC8vIOi/lOWbnuavj+S4gOmhueeahOWtkOe6p+aVsOe7hA0KICAgIC8vICAgICBicmFuY2hBcnIubGVuZ3RoID4gMCA/IHBhcmVudFsnY2hpbGRyZW4nXSA9IGJyYW5jaEFyciA6ICcnIC8vIOe7meeItue6p+a3u+WKoOS4gOS4qmNoaWxkcmVu5bGe5oCn77yM5bm26LWL5YC8DQogICAgLy8gICAgIHJldHVybiBwYXJlbnRbJ3BhcmVudElkJ10gPT09IC0xIC8vIOi/lOWbnuesrOS4gOWxgg0KICAgIC8vICAgfSkNCiAgICAvLyB9LA0KICAgIGFzeW5jIGdldEN1cnJlbnRMZXZlbHMocGFyZW50SWQpIHsNCiAgICAgIHRyeSB7DQogICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRyZWVBUEkuZ2V0QWxsTm9kZXMoew0KICAgICAgICAgIGtleVdvcmRzOiB0aGlzLmtleVdvcmRzLA0KICAgICAgICAgIHZpcnR1YWxSb290RmxhZzogZmFsc2UsDQogICAgICAgICAgc2VhcmNoS2V5OiB0aGlzLnNlYXJjaEtleXMsDQogICAgICAgICAgbGF6eTogdGhpcy5sYXp5LA0KICAgICAgICAgIHBhcmVudElkOiBwYXJlbnRJZA0KICAgICAgICB9KQ0KICAgICAgICBjb25zdCBub2RlcyA9IHJlcy5kYXRhLm1hcChpdGVtID0+ICh7DQogICAgICAgICAgaWQ6IGl0ZW0uaWQsDQogICAgICAgICAgbmFtZTogaXRlbS5uYW1lLA0KICAgICAgICAgIHBhcmVudElkOiBwYXJlbnRJZCwNCiAgICAgICAgICBsZWFmOiBpdGVtLmNoaWxkTnVtID09PSAwIC8vIOWIpOaWreaYr+WQpuS4uuacq+WwvuiKgueCuQ0KICAgICAgICB9KSkNCiAgICAgICAgcmV0dXJuIG5vZGVzDQogICAgICB9IGNhdGNoIChlcnJvcikgew0KICAgICAgICByZXR1cm4gW10NCiAgICAgIH0NCiAgICB9LA0KICAgIC8vIOaHkuWKoOi9vQ0KICAgIGFzeW5jIGxhenlMb2FkKG5vZGUsIHJlc29sdmUpIHsNCiAgICAgIGNvbnN0IHsgbGV2ZWwgfSA9IG5vZGUNCiAgICAgIGNvbnN0IHBhcmVudElkID0gbGV2ZWwgPyBub2RlLnZhbHVlIDogLTENCiAgICAgIHRyeSB7DQogICAgICAgIGNvbnN0IG5vZGVzID0gYXdhaXQgdGhpcy5nZXRDdXJyZW50TGV2ZWxzKHBhcmVudElkKQ0KICAgICAgICByZXNvbHZlKG5vZGVzKQ0KICAgICAgICAvLyB0aGlzLmNoYW5nZVNlbGVjdGlvbigpDQogICAgICB9IGNhdGNoIChlcnJvcikgew0KICAgICAgICByZXNvbHZlKFtdKQ0KICAgICAgfQ0KICAgIH0sDQogICAgLy8g5o6l5Y+j5YWl5Y+C6ZyA5rGC5Li65pyA5ZCO5LiA57qnIGlkDQogICAgaGFuZGxlQ2hhbmdlKHZhbCkgew0KICAgICAgY29uc3QgbGFzdElkID0gdmFsW3ZhbC5sZW5ndGggLSAxXQ0KICAgICAgdGhpcy4kZW1pdCgndXBkYXRlLXZhbHVlJywgbGFzdElkLCB0aGlzLmZpZWxkKQ0KICAgIH0sDQogICAgaGFuZGxlRm9jdXModmFsKSB7DQogICAgICBjb25zb2xlLmxvZyh2YWwpDQogICAgfQ0KICB9DQp9DQo="},{"version":3,"sources":["SimpleTreeSelect.vue"],"names":[],"mappingsfile":"SimpleTreeSelect.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <el-cascader v-if=\"isShowInfo\" ref=\"cascader\" v-model=\"arrVal\" v-loading=\"loading\" class=\"cascader\" :multiple=\"multiple\" :append-to-body=\"false\" :size=\"size\" :options=\"options\" :props=\"props\" :placeholder=\"placeholder\" clearable=\"\" @change=\"handleChange\" />\r\n</template>\r\n<script>\r\n// cascader没有loading属性\r\nimport treeAPI from '@/api/tree'\r\nimport _ from 'lodash'\r\n\r\nexport default {\r\n  name: 'SimpleTreeSelect',\r\n  props: {\r\n    value: { type: Number, default: () => null }, // 父级 v-model 绑定值（后端返回的 id 值）\r\n    field: { type: String, default: '' },\r\n    keyWords: { type: String, default: '' }, // 搜索级联选项关键字\r\n    placeholder: { type: String, default: '请选择' },\r\n    checkStrictly: { type: Boolean, default: true }, // 是否严格的遵守父子节点不互相关联\r\n    size: { type: String, default: '' },\r\n    searchKeys: { type: Object, default: () => {} },\r\n    lazy: { type: Boolean, default: true },\r\n    multiple: { type: Boolean, default: false }\r\n  },\r\n  data() {\r\n    return {\r\n      isShowInfo: true,\r\n      arrVal: this.value,\r\n      valTemp: [],\r\n      options: [], // 回显备选项\r\n      loading: true,\r\n      props: {\r\n        label: 'name',\r\n        value: 'id',\r\n        children: 'children',\r\n        checkStrictly: this.checkStrictly,\r\n        lazy: this.lazy,\r\n        lazyLoad: this.lazyLoad\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    // 通过value激发initOptions\r\n    value: {\r\n      async handler(val) {\r\n        this.changeSelection()\r\n      },\r\n      deep: true,\r\n      immediate: true\r\n    }\r\n  },\r\n  methods: {\r\n    async changeSelection() {\r\n      this.loading = true\r\n      if (this.value) {\r\n        const res = await treeAPI.getAllParentIndex(this.keyWords, this.value)\r\n        if (res.data.length > 0) {\r\n          this.valTemp = res.data.map(item => item.id).reverse()\r\n        }\r\n      } else {\r\n        this.valTemp = []\r\n      }\r\n      await this.initOptions()\r\n\r\n      if (this.lazy) {\r\n        this.isShowInfo = false\r\n        this.arrVal = [...this.valTemp]\r\n        this.$nextTick(() => {\r\n          this.isShowInfo = true\r\n        })\r\n      }\r\n      this.loading = false\r\n    },\r\n    async initOptions(searchKey) {\r\n      if (searchKey != null) {\r\n        this.searchKeys = searchKey\r\n      }\r\n      try {\r\n        if (!this.lazy) { // 不是懒加载\r\n          if (this.options.length === 0) { // 没有加载过,直接加载完\r\n            const res = await treeAPI.getAllNodes({\r\n              keyWords: this.keyWords,\r\n              virtualRootFlag: false,\r\n              searchKey: this.searchKeys,\r\n              lazy: false\r\n            })\r\n            this.options = res.data\r\n          }\r\n        } else { // 懒加载\r\n          var arrNow = _.cloneDeep(this.valTemp)\r\n          arrNow.unshift(-1)\r\n          arrNow.pop()\r\n          arrNow.reverse()\r\n          var res = []\r\n          var lastRes = []\r\n          var lastParent = 0\r\n          this.options = []\r\n          arrNow.forEach(async element => {\r\n            res = await treeAPI.getAllNodes({\r\n              keyWords: this.keyWords,\r\n              virtualRootFlag: false,\r\n              searchKey: searchKey,\r\n              lazy: true,\r\n              parentId: element\r\n            })\r\n            res = res.data\r\n            if (lastParent !== 0) {\r\n              res.forEach(el => {\r\n                if (el.id === element) {\r\n                  el.children.push(lastRes)\r\n                }\r\n              })\r\n            }\r\n            lastRes = _.cloneDeep(res)\r\n            lastParent = element\r\n          })\r\n          this.options = res\r\n        }\r\n      } catch (error) { console.log(error) }\r\n    },\r\n    // listToTree(list) {\r\n    //   const cloneData = JSON.parse(JSON.stringify(list)) // 对源数据深度克隆\r\n    //   return cloneData.filter(parent => { // 循环所有项，并添加children属性\r\n    //     const branchArr = cloneData.filter(child => parent['id'] === child['parentId']) // 返回每一项的子级数组\r\n    //     branchArr.length > 0 ? parent['children'] = branchArr : '' // 给父级添加一个children属性，并赋值\r\n    //     return parent['parentId'] === -1 // 返回第一层\r\n    //   })\r\n    // },\r\n    async getCurrentLevels(parentId) {\r\n      try {\r\n        const res = await treeAPI.getAllNodes({\r\n          keyWords: this.keyWords,\r\n          virtualRootFlag: false,\r\n          searchKey: this.searchKeys,\r\n          lazy: this.lazy,\r\n          parentId: parentId\r\n        })\r\n        const nodes = res.data.map(item => ({\r\n          id: item.id,\r\n          name: item.name,\r\n          parentId: parentId,\r\n          leaf: item.childNum === 0 // 判断是否为末尾节点\r\n        }))\r\n        return nodes\r\n      } catch (error) {\r\n        return []\r\n      }\r\n    },\r\n    // 懒加载\r\n    async lazyLoad(node, resolve) {\r\n      const { level } = node\r\n      const parentId = level ? node.value : -1\r\n      try {\r\n        const nodes = await this.getCurrentLevels(parentId)\r\n        resolve(nodes)\r\n        // this.changeSelection()\r\n      } catch (error) {\r\n        resolve([])\r\n      }\r\n    },\r\n    // 接口入参需求为最后一级 id\r\n    handleChange(val) {\r\n      const lastId = val[val.length - 1]\r\n      this.$emit('update-value', lastId, this.field)\r\n    },\r\n    handleFocus(val) {\r\n      console.log(val)\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]}]}