{"remainingRequest":"D:\\software\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\software\\front\\src\\components\\SimpleUpload.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\software\\front\\src\\components\\SimpleUpload.vue","mtime":1702016210649},{"path":"D:\\software\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\front\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\software\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQoNCi8vIOazqO+8muS4gOiIrOS4jeiDveiHquWKqOS4iuS8oOacjeWKoeWZqO+8jOWQpuWImeaXoOazleefpemBk+WFs+iBlOihqOS/oeaBr++8jOaJgOS7peW/hemhu+aYr+WcqOWkluWxguiwg+eUqOS4iuS8oA0KDQppbXBvcnQgQ09OU1RBTlQgZnJvbSAnQC9jb25zdGFudCcNCmltcG9ydCBmaWxlQVBJIGZyb20gJ0AvYXBpL2ZpbGUnDQoNCmV4cG9ydCBkZWZhdWx0IHsNCiAgbmFtZTogJ1NpbXBsZVVwbGFvZCcsDQogIHByb3BzOiB7DQogICAgdmFsdWU6IHsgdHlwZTogQXJyYXksIGRlZmF1bHQ6ICgpID0+IFtdIH0sIC8vIOeItue7hOS7tiB2LW1vZGVsIOe7keWumuWAvA0KICAgIHVwQnV0dG9uSW5mbzogew0KICAgICAgdHlwZTogT2JqZWN0LCBkZWZhdWx0OiAoKSA9PiAoew0KICAgICAgICBuYW1lOiAn54K55Ye75LiK5LygJywNCiAgICAgICAgdG9vbHRpcDogJ+WPquiDveS4iuS8oGpwZy9wbmfmlofku7bvvIzkuJTkuI3otoXov4c1MDBrYu+8gScNCiAgICAgIH0pDQogICAgfSwNCiAgICBmaWxlTWF4U2l6ZTogeyB0eXBlOiBOdW1iZXIsIGRlZmF1bHQ6IENPTlNUQU5ULkZJTEVfTUFYX1NJWkUgfSwNCiAgICBmaWxlQWxsb3dlZFR5cGVzOiB7IHR5cGU6IEFycmF5LCBkZWZhdWx0OiAoKSA9PiBbXSB9LCAvLyDmlK/mjIHmlofku7bnsbvlnosNCiAgICBhdXRvVXBsb2FkOiB7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IHRydWUgfSwNCiAgICBtdWx0aXBsZTogeyB0eXBlOiBCb29sZWFuLCBkZWZhdWx0OiB0cnVlIH0sDQogICAgYWxsb3dNdWx0aUZpbGVzOiB7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IHRydWUgfSwNCiAgICB1cGRhdGVTdGF0dXM6IHsgdHlwZTogQm9vbGVhbiwgZGVmYXVsdDogdHJ1ZSB9LA0KICAgIGxpc3RUeXBlOiB7IHR5cGU6IFN0cmluZywgZGVmYXVsdDogJ3RleHQnIH0sDQogIH0sDQogIGRhdGEoKSB7DQogICAgcmV0dXJuIHsNCiAgICAgIGZpbGVMaXN0OiB0aGlzLnZhbHVlLA0KICAgICAgdXBMb2FkaW5nOiBmYWxzZSwNCiAgICAgIHByb2dyZXNzUGVyY2VudDogMCwNCiAgICAgIHRpbWVyOiBudWxsLA0KICAgICAgaXNNYW51YWxEZWxldGU6IHRydWUNCiAgICB9DQogIH0sDQogIHdhdGNoOiB7DQogICAgdmFsdWU6IHsNCiAgICAgIGhhbmRsZXIodmFsKSB7DQogICAgICAgIGlmICh2YWwpIHsNCiAgICAgICAgICB0aGlzLmZpbGVMaXN0ID0gdmFsICAgICAgICAgIA0KICAgICAgICB9DQogICAgICB9DQogICAgfQ0KICB9LA0KICBtb3VudGVkKCkgew0KICAgIHRoaXMudGhpc0V2ZW50cyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5fZXZlbnRzKSkNCiAgfSwNCiAgbWV0aG9kczogew0KICAgIGNsZWFyRmlsZXMoKSB7DQogICAgICB0aGlzLiRyZWZzWyd1cGxvYWQnXS5jbGVhckZpbGVzKCkNCiAgICB9LA0KICAgIC8vIOS4iuS8oOS5i+WJjeeahOWbnuiwgw0KICAgIGJlZm9yZVVwbG9hZCgpIHsNCiAgICAgIGlmICghdGhpcy51cGRhdGVTdGF0dXMpIHsNCiAgICAgICAgdGhpcy4kbWVzc2FnZS53YXJuaW5nKCflvZPliY3nirbmgIHml6Dms5XkuIrkvKDmlofku7bvvIEnKQ0KICAgICAgfSBlbHNlIGlmICh0aGlzLmZpbGVMaXN0ICYmICh0aGlzLmZpbGVMaXN0Lmxlbmd0aCA+IDApICYmICghdGhpcy5hbGxvd011bHRpRmlsZXMpKSB7DQogICAgICAgIHRoaXMuJG1lc3NhZ2Uud2FybmluZygn5LiK5Lyg5paH5Lu25bey57uP6YCJ5oup77yB5aaC6ZyA6YeN5paw6YCJ5oup77yM6K+35YWI5Yig6Zmk5bey6YCJ5oup5paH5Lu277yBJykNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIHRoaXMuJHJlZnNbJ3VwbG9hZCddLiRyZWZzWyd1cGxvYWQtaW5uZXInXS5oYW5kbGVDbGljaygpDQogICAgICB9DQogICAgfSwNCiAgICBiZWZvcmVVcGxvYWRWZXJpZnkoZmlsZSkgew0KICAgICAgLy8g6aaW5YWI5Yik5pat5paH5Lu25aSn5bCPDQogICAgICB0aGlzLmlzTWFudWFsRGVsZXRlID0gZmFsc2UNCiAgICAgIGNvbnN0IGlzTHRTaXplID0gZmlsZS5zaXplIC8gMTAyNCAvIDEwMjQgPCB0aGlzLmZpbGVNYXhTaXplDQogICAgICBpZiAoIWlzTHRTaXplKSB7DQogICAgICAgIHRoaXMuJG1lc3NhZ2Uud2FybmluZyhg5LiK5Lyg5paH5Lu25aSn5bCP5LiN6IO96LaF6L+HJHt0aGlzLmZpbGVNYXhTaXplfU1CIWApDQogICAgICAgIHJldHVybiBmYWxzZQ0KICAgICAgfQ0KICAgICAgLy8g54S25ZCO5Yik5pat5paH5Lu25qC85byP5piv5ZCm5q2j56GuDQogICAgICBjb25zdCBmaWxlTmFtZSA9IGZpbGUubmFtZS5sYXN0SW5kZXhPZignLicpDQogICAgICBjb25zdCBmaWxlTmFtZUxlbmd0aCA9IGZpbGUubmFtZS5sZW5ndGgNCiAgICAgIGNvbnN0IGZpbGVGb3JtYXQgPSBmaWxlLm5hbWUuc3Vic3RyaW5nKGZpbGVOYW1lICsgMSwgZmlsZU5hbWVMZW5ndGgpDQogICAgICBpZiAoKHRoaXMuZmlsZUFsbG93ZWRUeXBlcy5sZW5ndGggPiAwKSAmJiAodGhpcy5maWxlQWxsb3dlZFR5cGVzLmluZGV4T2YoZmlsZUZvcm1hdC50b0xvd2VyQ2FzZSgpKSA9PT0gLTEpKSB7DQogICAgICAgIHRoaXMuJG1lc3NhZ2Uud2FybmluZyh0aGlzLnVwQnV0dG9uSW5mby50b29sdGlwKQ0KICAgICAgICByZXR1cm4gZmFsc2UNCiAgICAgIH0NCiAgICAgIC8vIOacgOWQjuWIpOaWreaYr+WQpuaYr+mHjeWkjeaWh+S7tumAieaLqQ0KICAgICAgbGV0IGkgPSAwDQogICAgICB0aGlzLmZpbGVMaXN0LmZvckVhY2goZmkgPT4gew0KICAgICAgICBpZiAoKGZpLm5hbWUgPT09IGZpbGUubmFtZSkgJiYgKGZpLnNpemUgPT09IGZpbGUuc2l6ZSkpIHsNCiAgICAgICAgICBpKysNCiAgICAgICAgfQ0KICAgICAgfSkNCiAgICAgIGlmIChpID4gMSkgew0KICAgICAgICB0aGlzLiRtZXNzYWdlLndhcm5pbmcoJ+W9k+WJjeaWh+S7tuW3sue7j+mAieaLqe+8gScpDQogICAgICAgIHJldHVybiBmYWxzZQ0KICAgICAgfQ0KICAgICAgdGhpcy5pc01hbnVhbERlbGV0ZSA9IHRydWUNCiAgICAgIHJldHVybiBmaWxlDQogICAgfSwNCiAgICBoYW5kbGVDaGFuZ2UoZmlsZSwgZmlsZUxpc3QpIHsNCiAgICAgIHRoaXMuZmlsZUxpc3QgPSBmaWxlTGlzdA0KICAgICAgdGhpcy4kZW1pdCgnaGFuZGxlLWNoYW5nZScsIGZpbGVMaXN0KQ0KICAgIH0sDQogICAgaGFuZGxlQmVmb3JlUmVtb3ZlKGZpbGUsIGZpbGVMaXN0KSB7DQogICAgICBpZiAoIXRoaXMudXBkYXRlU3RhdHVzKSB7DQogICAgICAgIHRoaXMuJG1lc3NhZ2Uud2FybmluZygn5b2T5YmN5paH5Lu25LiN6IO96KKr5Yig6Zmk77yBJykNCiAgICAgICAgcmV0dXJuIGZhbHNlDQogICAgICB9DQogICAgICBpZiAodGhpcy5pc01hbnVhbERlbGV0ZSkgew0KICAgICAgICByZXR1cm4gdGhpcy4kY29uZmlybSgn5Yig6Zmk5Lul5ZCO5LiN5Y+v5oGi5aSN77yM56Gu5a6a5Yig6Zmk6K+l5paH5Lu25ZCX77yfJywgJ+itpuWRiicsIHsNCiAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ+ehruWumicsDQogICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ+WPlua2iCcNCiAgICAgICAgfSkNCiAgICAgIH0NCiAgICB9LA0KICAgIGFzeW5jIGhhbmRsZVJlbW92ZShmaWxlLCBmaWxlTGlzdCkgew0KICAgICAgaWYgKGZpbGUuc3RhdHVzID09PSAnc3VjY2VzcycpIHsNCiAgICAgICAgYXdhaXQgZmlsZUFQSS5kZWxldGVGaWxlKFtmaWxlLmlkXSkNCiAgICAgIH0NCiAgICAgIHRoaXMuZmlsZUxpc3QgPSBmaWxlTGlzdA0KICAgIH0sDQogICAgLy8gdHlwZTogMSDlm77niYfvvJsyIOaWh+S7tg0KICAgIGFzeW5jIGhhbmRsZVVwbG9hZCh1c2VySWQsIHJlbElkLCB0eXBlKSB7DQogICAgICBjb25zdCBmaWxlcyA9IFtdDQogICAgICB0aGlzLmZpbGVMaXN0LmZvckVhY2goZmkgPT4gew0KICAgICAgICBmaWxlcy5wdXNoKGZpLnJhdykNCiAgICAgIH0pDQogICAgICBjb25zdCBwYXJhbXMgPSB7DQogICAgICAgIGZpbGVzOiBmaWxlcywNCiAgICAgICAgdXNlcklkOiB1c2VySWQsDQogICAgICAgIHJlbElkOiByZWxJZCwNCiAgICAgICAgdHlwZTogdHlwZQ0KICAgICAgfQ0KICAgICAgdHJ5IHsNCiAgICAgICAgdGhpcy51cExvYWRpbmcgPSB0cnVlDQogICAgICAgIHRoaXMudGltZXIgPSBzZXRJbnRlcnZhbCh0aGlzLmhhbmRsZVByb2dyZXNzLCAxMDAwKSAgICAgICAgDQogICAgICAgIGF3YWl0IGZpbGVBUEkudXBsb2FkKHBhcmFtcywgdGhpcy5wcm9ncmVzc1BlcmNlbnQpDQogICAgICB9IGNhdGNoIChlcnJvcikgew0KICAgICAgICB0aGlzLiRtZXNzYWdlLndhcm5pbmcoJ+aWh+S7tuS4iuS8oOWksei0pScgKyBlcnJvcikNCiAgICAgIH0NCiAgICAgIHRoaXMudXBMb2FkaW5nID0gZmFsc2UNCiAgICB9LA0KICAgIGhhbmRsZVByb2dyZXNzKCkgew0KICAgICAgdGhpcy5wcm9ncmVzc1BlcmNlbnQgPSBmaWxlQVBJLmdldFByb2dyZXNzUGVyY2VudCgpDQogICAgICBpZiAoIXRoaXMudXBMb2FkaW5nKSB7DQogICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcikNCiAgICAgICAgdGhpcy50aW1lciA9IG51bGwNCiAgICAgIH0NCiAgICB9LA0KICAgIGhhbmRsZVByZXZpZXcoZmlsZSkgew0KICAgICAgaWYgKGZpbGUuc3RhdHVzID09PSAnc3VjY2VzcycpIHsNCiAgICAgICAgdGhpcy4kY29uZmlybSgn5piv5ZCm5LiL6L296K+l5paH5Lu277yfJywgJ+aPkOekuicpDQogICAgICAgICAgLnRoZW4oYXN5bmMgXyA9PiB7DQogICAgICAgICAgICB0aGlzLmZ1bGxTY3JlZW5Mb2FkaW5nKCkgICAgICAgICAgICANCiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBmaWxlQVBJLmRvd25sb2FkRmlsZShmaWxlLmlkKSAgICAgICAgICAgIA0KICAgICAgICAgICAgdGhpcy5kb3dubG9hZEZpbGUoY29udGVudCwgZmlsZS5uYW1lKQ0KICAgICAgICAgICAgdGhpcy5mdWxsU2NyZWVuTG9hZGluZygpLmNsb3NlKCkNCiAgICAgICAgICB9KQ0KICAgICAgfQ0KICAgIH0NCiAgfQ0KfQ0K"},{"version":3,"sources":["SimpleUpload.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAafile":"SimpleUpload.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div>\r\n    <el-upload ref=\"upload\" v-model=\"fileList\" action multiple  :list-type=\"listType\" :auto-upload=\"autoUpload\" :before-remove=\"handleBeforeRemove\" :on-preview=\"handlePreview\" :on-remove=\"handleRemove\" :on-change=\"handleChange\" :file-list=\"fileList\" :http-request=\"() => {}\" :before-upload=\"beforeUploadVerify\">\r\n      <el-button size=\"small\" type=\"primary\" :title=\"upButtonInfo.tooltip\" @click.stop=\"beforeUpload\">{{ upButtonInfo.name }}</el-button>\r\n    </el-upload>\r\n    <div v-show=\"upLoading\">\r\n      <el-progress ref=\"progressBar\" :percentage=\"progressPercent\" :text-inside=\"true\" :stroke-width=\"24\" status=\"success\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\n// 注：一般不能自动上传服务器，否则无法知道关联表信息，所以必须是在外层调用上传\r\n\r\nimport CONSTANT from '@/constant'\r\nimport fileAPI from '@/api/file'\r\n\r\nexport default {\r\n  name: 'SimpleUplaod',\r\n  props: {\r\n    value: { type: Array, default: () => [] }, // 父组件 v-model 绑定值\r\n    upButtonInfo: {\r\n      type: Object, default: () => ({\r\n        name: '点击上传',\r\n        tooltip: '只能上传jpg/png文件，且不超过500kb！'\r\n      })\r\n    },\r\n    fileMaxSize: { type: Number, default: CONSTANT.FILE_MAX_SIZE },\r\n    fileAllowedTypes: { type: Array, default: () => [] }, // 支持文件类型\r\n    autoUpload: { type: Boolean, default: true },\r\n    multiple: { type: Boolean, default: true },\r\n    allowMultiFiles: { type: Boolean, default: true },\r\n    updateStatus: { type: Boolean, default: true },\r\n    listType: { type: String, default: 'text' },\r\n  },\r\n  data() {\r\n    return {\r\n      fileList: this.value,\r\n      upLoading: false,\r\n      progressPercent: 0,\r\n      timer: null,\r\n      isManualDelete: true\r\n    }\r\n  },\r\n  watch: {\r\n    value: {\r\n      handler(val) {\r\n        if (val) {\r\n          this.fileList = val          \r\n        }\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.thisEvents = JSON.parse(JSON.stringify(this._events))\r\n  },\r\n  methods: {\r\n    clearFiles() {\r\n      this.$refs['upload'].clearFiles()\r\n    },\r\n    // 上传之前的回调\r\n    beforeUpload() {\r\n      if (!this.updateStatus) {\r\n        this.$message.warning('当前状态无法上传文件！')\r\n      } else if (this.fileList && (this.fileList.length > 0) && (!this.allowMultiFiles)) {\r\n        this.$message.warning('上传文件已经选择！如需重新选择，请先删除已选择文件！')\r\n      } else {\r\n        this.$refs['upload'].$refs['upload-inner'].handleClick()\r\n      }\r\n    },\r\n    beforeUploadVerify(file) {\r\n      // 首先判断文件大小\r\n      this.isManualDelete = false\r\n      const isLtSize = file.size / 1024 / 1024 < this.fileMaxSize\r\n      if (!isLtSize) {\r\n        this.$message.warning(`上传文件大小不能超过${this.fileMaxSize}MB!`)\r\n        return false\r\n      }\r\n      // 然后判断文件格式是否正确\r\n      const fileName = file.name.lastIndexOf('.')\r\n      const fileNameLength = file.name.length\r\n      const fileFormat = file.name.substring(fileName + 1, fileNameLength)\r\n      if ((this.fileAllowedTypes.length > 0) && (this.fileAllowedTypes.indexOf(fileFormat.toLowerCase()) === -1)) {\r\n        this.$message.warning(this.upButtonInfo.tooltip)\r\n        return false\r\n      }\r\n      // 最后判断是否是重复文件选择\r\n      let i = 0\r\n      this.fileList.forEach(fi => {\r\n        if ((fi.name === file.name) && (fi.size === file.size)) {\r\n          i++\r\n        }\r\n      })\r\n      if (i > 1) {\r\n        this.$message.warning('当前文件已经选择！')\r\n        return false\r\n      }\r\n      this.isManualDelete = true\r\n      return file\r\n    },\r\n    handleChange(file, fileList) {\r\n      this.fileList = fileList\r\n      this.$emit('handle-change', fileList)\r\n    },\r\n    handleBeforeRemove(file, fileList) {\r\n      if (!this.updateStatus) {\r\n        this.$message.warning('当前文件不能被删除！')\r\n        return false\r\n      }\r\n      if (this.isManualDelete) {\r\n        return this.$confirm('删除以后不可恢复，确定删除该文件吗？', '警告', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消'\r\n        })\r\n      }\r\n    },\r\n    async handleRemove(file, fileList) {\r\n      if (file.status === 'success') {\r\n        await fileAPI.deleteFile([file.id])\r\n      }\r\n      this.fileList = fileList\r\n    },\r\n    // type: 1 图片；2 文件\r\n    async handleUpload(userId, relId, type) {\r\n      const files = []\r\n      this.fileList.forEach(fi => {\r\n        files.push(fi.raw)\r\n      })\r\n      const params = {\r\n        files: files,\r\n        userId: userId,\r\n        relId: relId,\r\n        type: type\r\n      }\r\n      try {\r\n        this.upLoading = true\r\n        this.timer = setInterval(this.handleProgress, 1000)        \r\n        await fileAPI.upload(params, this.progressPercent)\r\n      } catch (error) {\r\n        this.$message.warning('文件上传失败' + error)\r\n      }\r\n      this.upLoading = false\r\n    },\r\n    handleProgress() {\r\n      this.progressPercent = fileAPI.getProgressPercent()\r\n      if (!this.upLoading) {\r\n        clearInterval(this.timer)\r\n        this.timer = null\r\n      }\r\n    },\r\n    handlePreview(file) {\r\n      if (file.status === 'success') {\r\n        this.$confirm('是否下载该文件？', '提示')\r\n          .then(async _ => {\r\n            this.fullScreenLoading()            \r\n            const content = await fileAPI.downloadFile(file.id)            \r\n            this.downloadFile(content, file.name)\r\n            this.fullScreenLoading().close()\r\n          })\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]}]}