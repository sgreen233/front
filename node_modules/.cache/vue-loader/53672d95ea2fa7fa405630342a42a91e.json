{"remainingRequest":"D:\\software\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\software\\front\\src\\views\\system-manage\\Role.vue?vue&type=style&index=0&id=6ebb36fc&lang=scss&scoped=true&","dependencies":[{"path":"D:\\software\\front\\src\\views\\system-manage\\Role.vue","mtime":1670666520896},{"path":"D:\\software\\front\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\front\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\software\\front\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\software\\front\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQo6OnYtZGVlcCAuZWwtY2FyZF9fYm9keSB7DQogIHBhZGRpbmc6IDA7DQp9DQouYm94LWZsZXggew0KICBkaXNwbGF5OiBmbGV4Ow0KICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47DQp9DQo="},{"version":3,"sources":["Role.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2RA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Role.vue","sourceRoot":"src/views/system-manage","sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"box-flex\">\r\n      <div style=\"width: 45%\">\r\n        <BaseList :default-props=\"defaultBLProps\" @update-column=\"updateColumn\" />\r\n      </div>\r\n      <!-- 列表右侧-->\r\n      <div style=\"width:53%; \">\r\n        <el-card shadow=\"never\">\r\n          <div slot=\"header\">\r\n            <span title=\"选择指定角色分配菜单\">角色授权 | <strong>{{ currentColumn.name || \"--\" }}</strong></span>\r\n            <el-button :disabled=\"!currentColumn\" :loading=\"saveLoading\" size=\"mini\" style=\"float: right;padding: 6px 9px;margin-top:-5px\" type=\"primary\" :title=\"currentColumn ? '' : '请在左边列表选择一个角色'\" @click=\"saveRoleMenus\">保存</el-button>\r\n          </div>\r\n          <el-table ref=\"dataTree\" v-adaptive=\"{ noPage: true }\" v-loading=\"loading\" :data=\"treeData\" height=\"100%\" row-key=\"id\" :expand-row-keys=\"['-1']\">\r\n            <el-table-column prop=\"name\" label=\"名称\" width=\"150\" :show-overflow-tooltip=\"true\" />\r\n            <el-table-column label=\"查询\">\r\n              <template slot-scope=\"scope\">\r\n                <el-checkbox v-model=\"scope.row.authorizationInfo.visibleFlag\" @change=\"handleSingleChange( scope.row.authorizationInfo, scope, 'visibleFlag' )\" />\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column label=\"添加\">\r\n              <template slot-scope=\"scope\">\r\n                <el-checkbox v-model=\"scope.row.authorizationInfo.addFlag\" @change=\"handleSingleChange(scope.row.authorizationInfo,scope,'addFlag' )\" />\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column label=\"修改\">\r\n              <template slot-scope=\"scope\">\r\n                <el-checkbox v-model=\"scope.row.authorizationInfo.modifyFlag\" @change=\"handleSingleChange( scope.row.authorizationInfo, scope, 'modifyFlag' )\" />\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column label=\"删除\">\r\n              <template slot-scope=\"scope\">\r\n                <el-checkbox v-model=\"scope.row.authorizationInfo.deleteFlag\" @change=\" handleSingleChange( scope.row.authorizationInfo, scope, 'deleteFlag' )\" />\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column label=\"全部\">\r\n              <template slot-scope=\"scope\">\r\n                <el-checkbox v-model=\"scope.row.authorizationAllFlag\" :indeterminate=\" (\r\n                  scope.row.authorizationInfo.visibleFlag | scope.row.authorizationInfo.addFlag ||scope.row.authorizationInfo.modifyFlag || scope.row.authorizationInfo.deleteFlag)\r\n                  && !scope.row.authorizationAllFlag\" @change=\"handleCheckAllChange(scope.row.authorizationInfo, scope.row)\" />\r\n              </template>\r\n            </el-table-column>\r\n          </el-table>\r\n        </el-card>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport roleAPI from '@/api/role'\r\nimport BaseList from '@/views/master-page/BaseList'\r\nimport adaptive from '@/directive/el-table'\r\nexport default {\r\n  name: 'Role',\r\n  components: { BaseList },\r\n  directives: { adaptive },\r\n  data() {\r\n    return {\r\n      // title=\"角色列表\" :curd=\"curd\" :edit-key-words=\"editKeyWords\" :view-key-words=\"editKeyWords\"\r\n      defaultBLProps: {\r\n        defaultDTLProps: {\r\n          sortStr: { properties: 'theOrder', direction: 'ASC' }, // 排序方法\r\n          title: { mainTitle: '角色列表' },\r\n          defaultDTHProps: {\r\n            keyWord: { edit: 'SysRole' }\r\n          }\r\n        },\r\n        defaultSDProps: {\r\n          keyWord: 'SysRole',\r\n          defaultDBProps: {\r\n            dialog: {}\r\n          }\r\n        }\r\n      },\r\n\r\n      treeData: [],\r\n      currentColumn: '',\r\n      parentArr: [],\r\n      loading: false,\r\n      saveLoading: false\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    'currentColumn.id'(val) {\r\n      this.initDataTree()\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    async initDataTree() {\r\n      if (this.currentColumn.id) {\r\n        try {\r\n          this.loading = true\r\n          const resp = await roleAPI.getRolePermissions(this.currentColumn.id)\r\n          this.treeData = resp.data\r\n          this.initAllNodes()\r\n          this.loading = false\r\n        } catch (error) {\r\n          this.loading = false\r\n        }\r\n      }\r\n    },\r\n    // 初始化所有节点信息\r\n    initAllNodes() {\r\n      this.treeData[0].authorizationInfo.visibleFlag = true\r\n      this.treeData[0].authorizationInfo.addFlag = true\r\n      this.treeData[0].authorizationInfo.modifyFlag = true\r\n      this.treeData[0].authorizationInfo.deleteFlag = true\r\n      this.treeData[0].authorizationAllFlag = true\r\n      this.initCallFunc(this.treeData, 'authorizationAllFlag')\r\n      this.initCallFunc(this.treeData, 'visibleFlag')\r\n      this.initCallFunc(this.treeData, 'addFlag')\r\n      this.initCallFunc(this.treeData, 'modifyFlag')\r\n      this.initCallFunc(this.treeData, 'deleteFlag')\r\n    },\r\n    // 增删改查的联动\r\n    initCallFunc(val = this.treeData, prop) {\r\n      if (prop === 'authorizationAllFlag') {\r\n        val.forEach(e => {\r\n          if (e[prop] === false) {\r\n            return (this.treeData[0][prop] = false)\r\n          }\r\n          if (e.children && e.children.length) {\r\n            this.initCallFunc(e.children, prop)\r\n          }\r\n        })\r\n      } else {\r\n        val.forEach(e => {\r\n          if (e.authorizationInfo[prop] === false) {\r\n            return (this.treeData[0].authorizationInfo[prop] = false)\r\n          }\r\n          if (e.children && e.children.length) {\r\n            this.initCallFunc(e.children, prop)\r\n          }\r\n        })\r\n      }\r\n    },\r\n    // 回调循环函数\r\n    allCallFunc(val, status) {\r\n      if (val.children && val.children.length > 0) {\r\n        val.children.forEach(e => {\r\n          e.authorizationAllFlag = status\r\n          e.authorizationInfo.visibleFlag = e.authorizationInfo.addFlag = e.authorizationInfo.modifyFlag = e.authorizationInfo.deleteFlag = status\r\n          this.allCallFunc(e, status)\r\n        })\r\n      }\r\n      const pids = []\r\n      this.getParentNodes(this.treeData, val.id, pids)\r\n      this.parentNodesChange(this.treeData, pids, val)\r\n    },\r\n    // 单个回调函数\r\n    singleCallFunc(val, prop) {\r\n      if (val.children && val.children.length > 0) {\r\n        val.children.forEach(e => {\r\n          prop === 'visibleFlag' ? (e.authorizationInfo.visibleFlag = val.authorizationInfo.visibleFlag) : ''\r\n          prop === 'addFlag' ? (e.authorizationInfo.addFlag = val.authorizationInfo.addFlag) : ''\r\n          prop === 'modifyFlag' ? (e.authorizationInfo.modifyFlag = val.authorizationInfo.modifyFlag) : ''\r\n          prop === 'deleteFlag' ? (e.authorizationInfo.deleteFlag = val.authorizationInfo.deleteFlag) : ''\r\n\r\n          // 更新全选-非全选的内容\r\n          e.authorizationAllFlag = false\r\n          if (\r\n            e.authorizationInfo.visibleFlag === true && e.authorizationInfo.addFlag === true &&\r\n            e.authorizationInfo.modifyFlag === true && e.authorizationInfo.deleteFlag === true\r\n          ) {\r\n            e.authorizationAllFlag = true\r\n          } else if (\r\n            val.authorizationInfo.visibleFlag === false && val.authorizationInfo.addFlag === false &&\r\n            val.authorizationInfo.modifyFlag === false && val.authorizationInfo.deleteFlag === false\r\n          ) {\r\n            e.authorizationAllFlag = false\r\n          }\r\n          this.singleCallFunc(e, prop)\r\n        })\r\n      }\r\n      const pids = []\r\n      this.getParentNodes(this.treeData, val.id, pids)\r\n      this.parentNodesChange(this.treeData, pids, val)\r\n    },\r\n    // 当前行的改变\r\n    updateColumn(val) {\r\n      this.currentColumn = val\r\n    },\r\n    // 获取每层父节点的节点数组\r\n    getParentNodes(val, id, arr) {\r\n      val.forEach(e => {\r\n        if (e.id === id) {\r\n          if (e.parentId) {\r\n            // 排除顶级虚节点id=-1\r\n            arr.push(e.parentId)\r\n          }\r\n          this.getParentNodes(this.treeData, e.parentId, arr)\r\n        } else {\r\n          if (e.children && e.children.length) {\r\n            this.getParentNodes(e.children, id, arr)\r\n          }\r\n        }\r\n      })\r\n    },\r\n    parentNodesChange(arr, pids, val) {\r\n      arr.forEach(e => {\r\n        if (pids.indexOf(e.id) > -1) {\r\n          val.authorizationInfo.visibleFlag ? (e.authorizationInfo.visibleFlag = true) : ''\r\n          val.authorizationInfo.addFlag ? (e.authorizationInfo.addFlag = true) : ''\r\n          val.authorizationInfo.modifyFlag ? (e.authorizationInfo.modifyFlag = true) : ''\r\n          val.authorizationInfo.deleteFlag ? (e.authorizationInfo.deleteFlag = true) : ''\r\n          e.authorizationAllFlag = false\r\n          if (\r\n            e.authorizationInfo.visibleFlag === true && e.authorizationInfo.addFlag === true &&\r\n            e.authorizationInfo.modifyFlag === true && e.authorizationInfo.deleteFlag === true\r\n          ) {\r\n            e.authorizationAllFlag = true\r\n          } else if (\r\n            val.authorizationInfo.visibleFlag === false && val.authorizationInfo.addFlag === false &&\r\n            val.authorizationInfo.modifyFlag === false && val.authorizationInfo.deleteFlag === false\r\n          ) {\r\n            e.authorizationAllFlag = false\r\n          }\r\n        }\r\n        if (e.children && e.children.length) {\r\n          this.parentNodesChange(e.children, pids, val)\r\n        }\r\n      })\r\n    },\r\n    // 树节点的联动\r\n    parentNodeChange(val) {\r\n      if (val.children && val.children.length) {\r\n        val.children.forEach(child => {\r\n          if (child.authorizationInfo.visibleFlag === true) {\r\n            return (val.authorizationInfo.visibleFlag = true)\r\n          } else {\r\n            this.parentNodeChange(child)\r\n          }\r\n        })\r\n      }\r\n    },\r\n    // 全选\r\n    handleCheckAllChange(val, val2) {\r\n      if (val2.authorizationAllFlag) {\r\n        val.visibleFlag = val.addFlag = val.modifyFlag = val.deleteFlag = true\r\n        this.allCallFunc(val2, true)\r\n      } else {\r\n        val.visibleFlag = val.addFlag = val.modifyFlag = val.deleteFlag = false\r\n        this.allCallFunc(val2, false)\r\n      }\r\n      this.treeData[0].authorizationAllFlag = true\r\n      this.initAllNodes()\r\n    },\r\n    // 改变单个框的变化\r\n    handleSingleChange(val, val2, prop) {\r\n      val2.row.authorizationAllFlag = false\r\n      if (\r\n        val.visibleFlag === true && val.addFlag === true && val.modifyFlag === true && val.deleteFlag === true\r\n      ) {\r\n        // 使用scope.row直接赋值没有效果\r\n        val2.row.authorizationAllFlag = true\r\n      } else if (\r\n        val.visibleFlag === false && val.addFlag === false && val.modifyFlag === false && val.deleteFlag === false\r\n      ) {\r\n        val2.row.authorizationAllFlag = false\r\n      }\r\n\r\n      this.singleCallFunc(val2.row, prop)\r\n      this.treeData[0].authorizationAllFlag = true\r\n      this.initAllNodes()\r\n    },\r\n\r\n    // 保存权限\r\n    async saveRoleMenus() {\r\n      try {\r\n        this.saveLoading = true\r\n        await roleAPI.editRolePermission(this.currentColumn.id, this.treeData[0])\r\n        this.saveLoading = false\r\n        this.$message.success('保存成功！')\r\n      } catch (error) {\r\n        this.saveLoading = false\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n::v-deep .el-card__body {\r\n  padding: 0;\r\n}\r\n.box-flex {\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n</style>\r\n"]}]}