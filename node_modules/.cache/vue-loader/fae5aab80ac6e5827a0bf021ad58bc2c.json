{"remainingRequest":"D:\\software\\front\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\software\\front\\front\\src\\components\\wang-editor\\index.vue?vue&type=style&index=0&id=69134c5a&lang=scss&scoped=true&","dependencies":[{"path":"D:\\software\\front\\front\\src\\components\\wang-editor\\index.vue","mtime":1715830118035},{"path":"D:\\software\\front\\front\\node_modules\\css-loader\\dist\\cjs.js","mtime":1715830112594},{"path":"D:\\software\\front\\front\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1715830117510},{"path":"D:\\software\\front\\front\\node_modules\\postcss-loader\\src\\index.js","mtime":1715830115271},{"path":"D:\\software\\front\\front\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1715830116699},{"path":"D:\\software\\front\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1715830111371},{"path":"D:\\software\\front\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":1715830117510}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouZWRpdG9yIHsNCiAgOjp2LWRlZXAgLnctZS10b29sYmFyLA0KICA6OnYtZGVlcCAudy1lLXRleHQtY29udGFpbmVyIHsNCiAgICBib3JkZXItY29sb3I6ICNjY2MgIWltcG9ydGFudDsNCiAgfQ0KfQ0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkIA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/wang-editor","sourcesContent":["<template>\r\n  <div class=\"editor-box\">\r\n    <div ref=\"editor\" class=\"editor\"  />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport E from 'wangeditor'\r\nimport commonAPI from '@/api/file'\r\n\r\nexport default {\r\n  name: 'Editor',  \r\n  props: {\r\n    value: { type: String, default: '' },\r\n    placeholder: { type: String, default: '请输入正文' },\r\n    isDisabled: { type: Boolean, default: false },\r\n    isClear: { type: Boolean, default: false }\r\n  },\r\n  data() {\r\n    return {      \r\n      editor: ''      \r\n    }\r\n  },\r\n  watch: {\r\n    isClear(val) {\r\n      // 触发清除文本域内容\r\n      if (val) {\r\n        this.editor.txt.clear()\r\n        this.info_ = null\r\n      }\r\n    },\r\n    value(value) {\r\n      if (value !== this.editor.txt.html()) {\r\n        this.editor.txt.html(this.value)\r\n      }\r\n    }\r\n    // value为编辑框输入的内容，这里我监听了一下值，当父组件调用得时候，如果给value赋值了，子组件将会显示父组件赋给的值\r\n  },\r\n  mounted() {\r\n    this.setEditor()\r\n  },\r\n  methods: {\r\n    setEditor() {\r\n      this.editor = new E(this.$refs.editor)\r\n      this.editor.config.menus = [\r\n        'head', // 标题\r\n        'bold', // 粗体\r\n        'fontSize', // 字号\r\n        'fontName', // 字体\r\n        'italic', // 斜体\r\n        'underline', // 下划线\r\n        'strikeThrough', // 删除线\r\n        'indent', // 缩进\r\n        'lineHeight', // 行高\r\n        'foreColor', // 文字颜色\r\n        'backColor', // 背景颜色\r\n        'link', // 插入链接\r\n        'list', // 列表\r\n        'justify', // 对齐方式\r\n        'quote', // 引用\r\n        'emoticon', // 表情\r\n        'image', // 插入图片\r\n        'table', // 插入表格\r\n        'splitLine', // 插入分割线\r\n        'undo', // 撤销\r\n        'redo', // 恢复\r\n        'fullscreen' // 全屏\r\n      ]\r\n      this.editor.config.placeholder = this.placeholder\r\n      this.editor.config.uploadImgMaxSize = 10 * 1024 * 1024 // 将图片大小限制为 10M\r\n      // editor.config.uploadFileName = 'file' // 后端接受上传文件的参数名\r\n      // editor.config.uploadImgParams = {\r\n      //   relationId: 0,\r\n      //   type: 0\r\n      // } // 上传图片时可自定义传递一些参数，参数会被添加到 formData 中，一起上传到服务端\r\n      this.editor.config.uploadImgMaxLength = 6 // 限制一次最多上传 1 张图片\r\n      this.editor.config.showLinkImg = false // 隐藏网络图片上传\r\n      // 自定义上传方法\r\n      // eslint-disable-next-line space-before-function-paren\r\n      this.editor.config.customUploadImg = async (resultFiles, insertImgFn) => {\r\n        // resultFiles 是 input 中选中的文件列表\r\n        for (var file of resultFiles) {\r\n          const params = {\r\n            file: file,\r\n            relationId: 0,\r\n            type: 0,\r\n            source: 0\r\n          }\r\n          const res = await commonAPI.commonUpload(params)\r\n          const imgUrl = res.data.url\r\n          // insertImgFn 是获取图片 url 后，插入到编辑器的方法\r\n          insertImgFn(imgUrl)\r\n        }\r\n      }\r\n      this.editor.config.uploadImgHooks = {\r\n        fail: (xhr, editor, result) => {\r\n          // 插入图片失败回调\r\n          console.log(result)\r\n        },\r\n        success: (xhr, editor, result) => {\r\n          // 图片上传成功回调\r\n          console.log(result)\r\n        },\r\n        timeout: (xhr, editor) => {\r\n          // 网络超时的回调\r\n          console.log('网络超时')\r\n        },\r\n        error: (xhr, editor) => {\r\n          // 图片上传错误的回调\r\n          console.log('上传错误')\r\n        },\r\n        // 回显\r\n        customInsert: (insertImg, result, editor) => {\r\n          // 图片上传成功，插入图片的回调\r\n          // result为上传图片成功的时候返回的数据，这里我打印了一下发现后台返回的是data：[{url:\"路径的形式\"},...]\r\n          insertImg(result.data.url) // 为插入图片的函数\r\n        }\r\n      }\r\n      this.editor.config.onchange = html => {\r\n        this.$emit('input', html)\r\n      }\r\n      this.editor.create()\r\n      this.editor.txt.html(this.value)\r\n      if (this.isDisabled) this.editor.disable()\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.editor {\r\n  ::v-deep .w-e-toolbar,\r\n  ::v-deep .w-e-text-container {\r\n    border-color: #ccc !important;\r\n  }\r\n}\r\n</style>\r\n"]}]}